#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrbook
\begin_preamble
% Various macros for the Arduino Book. Saves typing when things change!
\newcommand{\avr}{AVR micro controller}
\newcommand{\avrs}{AVR micro controllers}
\newcommand{\ardvers}{1.8.5}

% In file and path names, a "\-" is a hint to LaTeX to hyphenate here.
\newcommand{\ardbase}{\texttt{/home/\-norman/\-arduino-\ardvers}}
\newcommand{\ardbasew}{\texttt{c:$\backslash$\-users$\backslash$\-norman$\backslash$\-arduino-\ardvers}}
\newcommand{\ardinst}{\ardbase\texttt{/\-hardware/\-arduino/\-avr}}
\newcommand{\ardinstw}{\ardbasew\texttt{$\backslash$\-hardware$\backslash$\-arduino$\backslash$\-avr}}
\newcommand{\ardinc}{\ardinst\texttt{/\-cores/\-arduino}}
\newcommand{\ardincw}{\ardinstw\texttt{$\backslash$\-cores$\backslash$\-arduino}}
\newcommand{\avrinc}{\ardbase\texttt{/\-hardware/\-tools/\-avr/\-avr/\-include}}
\newcommand{\avrincw}{\ardbasew\texttt{$\backslash$\-hardware$\backslash$\-tools$\backslash$\-avr$\backslash$\-include}}

% Required for the setup of the listings.
\usepackage{xcolor}
\definecolor{ocre}{RGB}{243,102,25}
\definecolor{wwwDarkGreen}{HTML}{006400}
\definecolor{wwwDarkOrchid}{HTML}{9932CC}
\definecolor{wwwDarkOrange}{HTML}{FF8C00}


% Boxes
\usepackage[most]{tcolorbox}

% WARNING
\newtcbox{\warningbox}{left=0mm,right=0mm,colback=red!5!white,colframe=red!75!black,fonttitle=\bfseries,title=Warning}
\newcommand{\warning}[1]{\warningbox{\vbox{#1}}}

% IMPORTANT
\definecolor{amber}{rgb}{1.0, 0.75, 0.0}
\newtcbox{\importantbox}{left=0mm,right=0mm,colback=amber!5!white,colframe=amber!75!black,fonttitle=\bfseries,title=Important}
\newcommand{\important}[1]{\importantbox{\vbox{#1}}}

%NOTE
\newtcbox{\notebox}{left=0mm,right=0mm,colback=blue!5!white,colframe=blue!75!black,fonttitle=\bfseries,title=Note}
\newcommand{\note}[1]{\notebox{\vbox{#1}}}

%TIP
\newtcbox{\tipbox}{left=0mm,right=0mm,colback=green!5!white,colframe=green!75!black,fonttitle=\bfseries,title=Tip}
\newcommand{\tip}[1]{\tipbox{\vbox{#1}}}


% To get Arduino code highlighting
\input{arduinoLanguage.tex}    % adds the arduino language listing

%% Define an Arduino style for use later %%
\lstdefinestyle{myArduino}{
  language=Arduino,
  %% Add other words needing highlighting below %%
  morekeywords=[1]{},                  % [1] -> dark green
  morekeywords=[2]{FILE_WRITE},        % [2] -> light blue
  morekeywords=[3]{SD, File},          % [3] -> bold orange
  morekeywords=[4]{open, exists},      % [4] -> orange
  %% The lines below add a nifty box around the code %%
  frame=shadowbox,
  rulesepcolor=\color{arduinoBlue},
}

\usepackage[toc,page]{appendix}
% Added by lyx2lyx
\renewcommand{\textendash}{--}
\renewcommand{\textemdash}{---}
\end_preamble
\options idxtotoc, numbers=noendperiod
\use_default_options true
\begin_modules
tcolorbox
\end_modules
\maintain_unincluded_children false
\begin_local_layout
Format 60
    InsetLayout Flex:RegisterName
    LyxType          charstyle
    LabelString    RegisterName
    LatexType      command
    LatexName    registername
    Preamble
        \newcommand*{\registername}[1]{{\ttfamily #1}}
    EndPreamble
    Font
        Family        Typewriter
    EndFont
    ResetsFont  true
End
    InsetLayout Flex:FileName
    LyxType          charstyle
    LabelString    FileName
    LatexType      command
    LatexName    filename
    Preamble
        \newcommand*{\filename}[1]{{\ttfamily #1}}
    EndPreamble
    Font
        Family        Typewriter
    EndFont
    ResetsFont  true
End
    InsetLayout Flex:FunctionName
    LyxType          charstyle
    LabelString    FunctionName
    LatexType      command
    LatexName    functionname
    Preamble
        \newcommand*{\functionname}[1]{{\ttfamily #1}}
    EndPreamble
    Font
        Family        Typewriter
    EndFont
    ResetsFont  true
End
    InsetLayout Flex:EnvVar
    LyxType          charstyle
    LabelString    EnvVar
    LatexType      command
    LatexName    envvar
    Preamble
        \newcommand*{\envvar}[1]{{\ttfamily #1}}
    EndPreamble
    Font
        Family        Typewriter
    EndFont
    ResetsFont  true
End
    InsetLayout Flex:ClassName
    LyxType          charstyle
    LabelString    ClassName
    LatexType      command
    LatexName    classname
    Preamble
        \newcommand*{\classname}[1]{{\ttfamily #1}}
    EndPreamble
    Font
        Family        Typewriter
    EndFont
    ResetsFont  true
End
\end_local_layout
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command default
\index_command default
\float_placement !h
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_title "Writing Arduino and AVR Libraries"
\pdf_author "Norman Dunbar"
\pdf_subject "How to write, test, package and installe libraries for the Arduino IDE and for PlatformIO as well as other development platforms for the AVR family of processors."
\pdf_keywords "Arduino, AVR, libraries"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\boxbgcolor #ff557f
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\listings_params "style=myArduino,showstringspaces=false"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%-------------------------------------------------------------------------------
---------
\end_layout

\begin_layout Plain Layout

%	TITLE PAGE
\end_layout

\begin_layout Plain Layout

%-------------------------------------------------------------------------------
---------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begingroup
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[remember picture,overlay]
\end_layout

\begin_layout Plain Layout


\backslash
coordinate [below=12cm] (midpoint) at (current page.north);
\end_layout

\begin_layout Plain Layout


\backslash
node at (current page.north west)
\end_layout

\begin_layout Plain Layout

{
\backslash
begin{tikzpicture}[remember picture,overlay]
\end_layout

\begin_layout Plain Layout


\backslash
node[anchor=north west,inner sep=0pt] at (0,0) {
\backslash
includegraphics[width=
\backslash
paperwidth]{images/cover.png}}; % Background image
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout

%
\backslash
vfill
\end_layout

\begin_layout Plain Layout


\backslash
endgroup
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%-------------------------------------------------------------------------------
---------
\end_layout

\begin_layout Plain Layout

%	COPYRIGHT PAGE
\end_layout

\begin_layout Plain Layout

%-------------------------------------------------------------------------------
---------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
newpage
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

~
\backslash
vfill
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
noindent 
\backslash
textsc{Published by MeMyselfEye Publishing ;-)}
\backslash

\backslash
 % Publisher
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout


\backslash
textbf{Download from:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
url{https://github.com/NormanDunbar/WritingLibraries/releases/latest}
\backslash

\backslash
 % Download URL
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
textbf{Licence:}
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
noindent Licensed under the Creative Commons Attribution-NonCommercial 3.0
 Unported License (the ``License'').
 You may not use this file except in compliance with the License.
 You may obtain a copy of the License at 
\backslash
url{http://creativecommons.org/licenses/by-nc/3.0}.
 Unless required by applicable law or agreed to in writing, software distributed
 under the License is distributed on an 
\backslash
textsc{``as is'' basis, without warranties or conditions of any kind}, either
 express or implied.
 See the License for the specific language governing permissions and limitations
 under the License.
\backslash

\backslash
 % License information
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
noindent 
\backslash
textit{First printing, August 2021} 
\backslash

\backslash
% Printing/edition date
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
noindent This pdf document was created on 
\backslash
textit{
\backslash
pdfcreationdate}.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
noindent This pdf document was created on 
\backslash
textit{
\backslash
the
\backslash
day/
\backslash
the
\backslash
month/
\backslash
the
\backslash
year} at 
\backslash
textit{
\backslash
DTMcurrenttime}.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
noindent Copyright 
\backslash
copyright 2021 Norman Dunbar
\backslash

\backslash
 % Copyright notice
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand lstlistoflistings

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
mainmatter
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
In this eBook, we are going to take a look at writing libraries for the
 Arduino and for other AVR based microcontroller systems.
 Libraries are useful chunks of code that facilitate some, potentially difficult
, task for a project or sketch.
 The Arduino environment has many libraries available for your use and in
 this chapter, we will create an example library that:
\end_layout

\begin_layout Itemize
Initially, can be used in the Arduino IDE, and also, in PlatformIO using
 the Arduino framework;
\end_layout

\begin_layout Itemize
Convert it to be used in the Arduino IDE and in PlatformIO without a framework
 being needed and on any other AVR development system.
\end_layout

\begin_layout Standard
Where appropriate, details of packaging the library to make it available
 for download will also be given.
\end_layout

\begin_layout Standard
The source code for the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 Arduino specific library, the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library and the \SpecialChar LyX
 source code for this eBook are all freely available on
 my GitHub account.
 The locations are:
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/NormanDunbar/digitalPin"

\end_inset

 for the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library;
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/NormanDunbar/avrDigitalPin"

\end_inset

 for the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library;
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/NormanDunbar/WritingLibraries"

\end_inset

 for the \SpecialChar LyX
 source of this eBook, plus a PDF version.
\end_layout

\begin_layout Section
The 
\begin_inset Quotes eld
\end_inset

digitalPin
\begin_inset Quotes erd
\end_inset

 Library
\end_layout

\begin_layout Standard
We will start with a simple Arduino library to define a 
\begin_inset Quotes eld
\end_inset

thing
\begin_inset Quotes erd
\end_inset

 called a 
\begin_inset Quotes eld
\end_inset

digitalPin
\begin_inset Quotes erd
\end_inset

.
 This will be written as a new C++ class.
 The class will:
\end_layout

\begin_layout Itemize
Allow digitalPins to be created as input, input with pullup or output;
\end_layout

\begin_layout Itemize
Allow output digitalPins to be set high or low;
\end_layout

\begin_layout Itemize
Allow output digitalPins to be toggled;
\end_layout

\begin_layout Itemize
Allow output digitalPins to be read to check their state;
\end_layout

\begin_layout Itemize
Allow input digitalPins to be read to check their state;
\end_layout

\begin_layout Itemize
Prevent input digitalPins from being set or toggled.
\end_layout

\begin_layout Standard
The library will be kept as simple as possible while still providing some
 measure of usefulness.
 You may find, if I write it correctly, that it can be used in place of
 the facilities in the Arduino Language and might, eventually, make your
 code smaller for the same function.
 We shall see!
\end_layout

\begin_layout Chapter
Pure Arduino Libraries
\end_layout

\begin_layout Standard
Pure Arduino libraries use the Arduino language, just as you would in a
 sketch.
 Functions such as 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
digitalWrite()
\end_layout

\end_inset

, 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
digitalRead()
\end_layout

\end_inset

 and so on will be available for use.
 These libraries are designed for use in the Arduino IDE but can be used,
 as is, in other systems such as PlatformIO.
\end_layout

\begin_layout Section
Writing the Library
\end_layout

\begin_layout Standard
Writing the library will be broken down into manageable chunk over the remainder
 of this section.
 Each chuck, as it were, will define a particular feature of the required
 feature list outlined previously.
 We will start by creating a header file to describe the new class for a
 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
The Header File
\end_layout

\begin_layout Standard
The header file describes the class, and usually has no specific code for
 implementing the features.
 However, we can include small code fragments if we wish to 
\begin_inset Quotes eld
\end_inset

inline
\begin_inset Quotes erd
\end_inset

 those features.
 We will add any required inline features as or when deemed necessary.
\end_layout

\begin_layout Standard
Why would we inline code? Well, one reason is because the execution, and
 size, of the inlined code is much smaller than a function call would be,
 and is more efficient.
\end_layout

\begin_layout Standard
The instructions that follow are the ones I used when writing this demonstration
 library.
 You may, if you wish, use your own locations, but it's probably easier
 if you follow mine for now.
 Let us begin:
\end_layout

\begin_layout Itemize
Create a top-level directory and name it 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Code
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Inside that directory, create a directory named 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Arduino
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Change into the Code/Arduino directory and create two empty files, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.h
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Edit the header file and add the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-header-file"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#ifndef DIGITALPIN_H
\end_layout

\begin_layout Plain Layout

#define DIGITALPIN_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "Arduino.h"
\end_layout

\begin_layout Plain Layout

#include <stdint.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* 
\end_layout

\begin_layout Plain Layout

 * A library to implement a digitalPin class for the Arduino
\end_layout

\begin_layout Plain Layout

 * IDE.
 This class is designed only for the IDE, but can be
\end_layout

\begin_layout Plain Layout

 * used unchanged by PlatformIO provided that the project
\end_layout

\begin_layout Plain Layout

 * using it, is using the Arduino Framework and has this
\end_layout

\begin_layout Plain Layout

 * definedin the platformio.ini file.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class digitalPin {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

     // Constructor.
\end_layout

\begin_layout Plain Layout

    digitalPin(uint8_t pinNumber,
\end_layout

\begin_layout Plain Layout

               uint8_t Mode);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // There is no destructor as a digitalPin should never 
\end_layout

\begin_layout Plain Layout

    // go out of scope.
 Famous last words?
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Output digitalPins:
\end_layout

\begin_layout Plain Layout

    void setState(uint8_t pinState);
\end_layout

\begin_layout Plain Layout

    void toggleState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Input and Output Pins
\end_layout

\begin_layout Plain Layout

    uint8_t getState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The Arduino pin number.
 This is 0 through 13,
\end_layout

\begin_layout Plain Layout

    // A0 through A5 which can be referenced as 14
\end_layout

\begin_layout Plain Layout

    // through 19 too.
\end_layout

\begin_layout Plain Layout

    uint8_t _pinNumber;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Flag to indicate if this is an output pin.
\end_layout

\begin_layout Plain Layout

    bool _isOutput;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif // DIGITALPIN_H 
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The digitalPin.h Header File
\begin_inset CommandInset label
LatexCommand label
name "lis:The-digitalPin-header-file"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see there's not a lot to this file, so far.
 We will be adding some code fragments to it as we go along.
 We will start with the constructor, which is always a good place to start.
\end_layout

\begin_layout Subsection
Construction
\end_layout

\begin_layout Standard
Construction of a 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 is fairly simple.
 We need to know two things:
\end_layout

\begin_layout Itemize
The pin number, in Arduino Speak;
\end_layout

\begin_layout Itemize
The pin's mode.
\end_layout

\begin_layout Standard
As you can see from Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-header-file"

\end_inset

, the constructor is supplied with the required information.
 We don't need the pin mode except to initially create our 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 variable, however, in order to enforce the rule that input 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

s cannot be manipulated by the code, only by external influences, we will
 keep a flag that tells whether a 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 is an output pin or not.
 We will need to keep hold of the pin number for use in the other functions.
\end_layout

\begin_layout Standard
Edit the file 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

 and add the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-constructor"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include "digitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Constructor
\end_layout

\begin_layout Plain Layout

digitalPin::digitalPin(uint8_t pinNumber,
\end_layout

\begin_layout Plain Layout

                       uint8_t Mode)
\end_layout

\begin_layout Plain Layout

    : _pinNumber(pinNumber),
\end_layout

\begin_layout Plain Layout

      _isOutput(false)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    // Update the output pin flag.
\end_layout

\begin_layout Plain Layout

    if (Mode == OUTPUT)
\end_layout

\begin_layout Plain Layout

        _isOutput = true;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Configure the pin.
\end_layout

\begin_layout Plain Layout

    pinMode(pinNumber, Mode);
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The digitalPin Constructor
\begin_inset CommandInset label
LatexCommand label
name "lis:The-digitalPin-constructor"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There's not much to this code is there? We initialise
\begin_inset Foot
status open

\begin_layout Plain Layout
Apparently, this is the correct method of initialising class members, but
 you have to initialise them in exactly the same order as that are defined
 in the header file, or the compiler will complain with a fairly cryptic
 error message which doesn't make it clear what the problem is!
\end_layout

\end_inset

 the private member variables with the pin number supplied in the constructor
 call, and set the output flag to false, as we assume an input pin.
 
\end_layout

\begin_layout Standard
After initialisation, we update the flag is our passed mode is for an output
 pin.
 Then we simply call the Arduino 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
pinMode()
\end_layout

\end_inset

 function to set the required mode for the pin.
\end_layout

\begin_layout Standard
Our 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 is now correctly configured.
\end_layout

\begin_layout Subsection
Setting Output State
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-setState-function"

\end_inset

 shows the simple code we have to add to 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

, in order to set the state of an output configured 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

.
 It is pretty simple as it only has to call the 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
digitalWrite()
\end_layout

\end_inset

 function from the Arduino Language.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// For Output digitalPins:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Set the pin state to high or low.
\end_layout

\begin_layout Plain Layout

void digitalPin::setState(uint8_t pinState)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    if (_isOutput)
\end_layout

\begin_layout Plain Layout

        digitalWrite(_pinNumber, pinState);
\end_layout

\begin_layout Plain Layout

}    
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The digitalPin setState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:The-digitalPin-setState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Why do we bother to check if the pin is an output pin? Well, it's for safety.
 There could be some configuration where attaching a sensor or other peripheral
 to an Arduino pin and then feeding a voltage down that pin towards the
 sensor, 
\emph on
might
\emph default
 cause the magic blue smoke to be released, rendering the sensor null and
 void!
\end_layout

\begin_layout Standard
However unlikely that is to happen, if you are reading the voltage from
 an input pin, but then attempt to set it to a high state, you will, in
 effect, have configured the pin as an INPUT_PULLUP and this might affect
 the working of your sketch.
 Why is this the case?
\end_layout

\begin_layout Standard
Internally to the ATmega328 on your Arduino Uno board, there is a register
 called the Data Direction Register, DDR, for each pin
\begin_inset Foot
status open

\begin_layout Plain Layout
Actually, for each bank of pins, but we are ignoring that here.
\end_layout

\end_inset

 which determines if it is an INPUT or OUTPUT pin, plus a register to read
 the pin's state – the PIN register and one final register to set the pin's
 state – the PORT register.
\end_layout

\begin_layout Standard
The PORT register is only ever used when setting an output pin's state to
 HIGH or LOW.
 However, when the pin is configured by the DDR to be an INPUT pin, it is
 not needed, so the Atmel engineers made it so that writing to an input
 pin's PORT register turns it into an INPUT_PULLUP pin by enabling the internal
 pullup resistors for the appropriate pin.
\end_layout

\begin_layout Subsection
Toggling Output State
\end_layout

\begin_layout Standard
The code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-toggleState-function"

\end_inset

 should be added to the end of 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

 to facilitate the toggling of an output pin.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Toggle the current pin state.
\end_layout

\begin_layout Plain Layout

void digitalPin::toggleState()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    if (_isOutput)
\end_layout

\begin_layout Plain Layout

        digitalWrite(_pinNumber, !digitalRead(_pinNumber));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The digitalPin toggleState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:The-digitalPin-toggleState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code checks to ensure we are dealing with an output pin, and if so,
 reads the current state of the pin, inverts it, and writes it back to the
 pin.
 This is all facilitated by the Arduino Language functions.
\end_layout

\begin_layout Subsection
Reading Input and Output State
\end_layout

\begin_layout Standard
Input and output pins can be read to determine what state they are currently
 displaying.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-getState-function"

\end_inset

 is the last piece of code we need to add to 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

, and shows how we go about reading the pin's state.
 Once again, we simply use the features of the Arduino Language to determine
 what state a pin happens to be in at that point.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// For Input and Output Pins.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Read the pin state.
\end_layout

\begin_layout Plain Layout

uint8_t digitalPin::getState()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    return digitalRead(_pinNumber);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The digitalPin getState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:The-digitalPin-getState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's all there is to it.
 We can now test the library code.
 Please be aware that at this point, it's not actually built as a library,
 that comes later.
\end_layout

\begin_layout Section
Testing the 
\begin_inset Quotes eld
\end_inset

digitalPin
\begin_inset Quotes erd
\end_inset

 Library
\begin_inset CommandInset label
LatexCommand label
name "sec:Testing-the-digitalPin-library"

\end_inset


\end_layout

\begin_layout Standard
This section contains a pair of simple sketches to exercise output and input
 digitalPins.
\end_layout

\begin_layout Subsection
Output Test Sketch
\end_layout

\begin_layout Standard
A small test sketch to exercise an output 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 can be seen in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Output-Pin-Test-Sketch"

\end_inset

.
 It calls the 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
setState()
\end_layout

\end_inset

 function in 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
setup()
\end_layout

\end_inset

, and in 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
loop()
\end_layout

\end_inset

, toggles the pin's state.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "digitalPins" library.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "digitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create a digitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

digitalPin ledPin(LED_BUILTIN, OUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup() {
\end_layout

\begin_layout Plain Layout

    // No setup specifically required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (byte x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(HIGH);
\end_layout

\begin_layout Plain Layout

        delay(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(LOW);
\end_layout

\begin_layout Plain Layout

        delay(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    delay(1500);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop() {
\end_layout

\begin_layout Plain Layout

    // Flash the pin every second.
\end_layout

\begin_layout Plain Layout

    ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

    delay(1000);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Output Pin Test Sketch
\begin_inset CommandInset label
LatexCommand label
name "lis:Output-Pin-Test-Sketch"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open the Arduino IDE and enter the code shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Output-Pin-Test-Sketch"

\end_inset

 into a new sketch, then save it as with an appropriate sketch name.
\end_layout

\begin_layout Standard
Don't compile it yet, because it is still incomplete, we have not given
 the sketch access to the library that we are developing.
 
\end_layout

\begin_layout Standard
Once the test sketch has been saved: 
\end_layout

\begin_layout Itemize
Click on the button with a downward pointing 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 on it – it's on the far right of the tab bar currently showing the name
 of your sketch file;
\end_layout

\begin_layout Itemize
Select 
\begin_inset Quotes eld
\end_inset

New Tab
\begin_inset Quotes erd
\end_inset

 when the menu appears;
\end_layout

\begin_layout Itemize
Type the name 
\begin_inset Quotes eld
\end_inset

digitalPin.h
\begin_inset Quotes erd
\end_inset

 (without quotes) then click OK.
\end_layout

\begin_layout Itemize
Paste the code from the file 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.h
\end_layout

\end_inset

, Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-header-file"

\end_inset

, into the new tab and save it.
\end_layout

\begin_layout Standard
Now the same process is required for the implementation file.
\end_layout

\begin_layout Itemize
Click on the button with a downward pointing 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 on it again;
\end_layout

\begin_layout Itemize
Select 
\begin_inset Quotes eld
\end_inset

New Tab
\begin_inset Quotes erd
\end_inset

 when the menu appears;
\end_layout

\begin_layout Itemize
Type the name 
\begin_inset Quotes eld
\end_inset

digitalPin.cpp
\begin_inset Quotes erd
\end_inset

 (without quotes) then click OK.
\end_layout

\begin_layout Itemize
Paste the code from the file 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cppp
\end_layout

\end_inset

, Listings 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-constructor"

\end_inset

 through 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:The-digitalPin-getState-function"

\end_inset

 into the new tab and save it.
\end_layout

\begin_layout Standard
Now you can compile the sketch.
\end_layout

\begin_layout Subsection
Input Test Sketch
\end_layout

\begin_layout Standard
A sketch to test an input 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 follows in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Input-Pin-Test-Sketch"

\end_inset

 where a switch attached to pin 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D2
\end_layout

\end_inset

 is used to toggle the built in LED on pin 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D13
\end_layout

\end_inset

.
 Please note, as per the comments, if the switch is particularly bouncy,
 you may see some spurious effects such as the LED remaining unchanged when
 the switch is pressed to toggle it.
 The 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
delay()
\end_layout

\end_inset

 at the end of the 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
loop()
\end_layout

\end_inset

 is to avoid the switch being read too frequently while your finger remains
 on it.
 If you press and hold the switch, you will see the LED toggle for as long
 as you hold it down.
\end_layout

\begin_layout Standard
To turn it on and off, press and release quickly.
 You may have to adjust the delay if your switch is bouncier than mine,
 or if your fingers are too quick/slow to release.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "digitalPins" library.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Reads a switch on pin D2, toggles the builtin LED.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "digitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create a digitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

digitalPin ledPin(LED_BUILTIN, OUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// And another attached to D2, configured as an input 
\end_layout

\begin_layout Plain Layout

// with pullup.
\end_layout

\begin_layout Plain Layout

digitalPin switchPin(2, INPUT_PULLUP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup() {
\end_layout

\begin_layout Plain Layout

    // No setup specifically required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (byte x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(HIGH);
\end_layout

\begin_layout Plain Layout

        delay(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(LOW);
\end_layout

\begin_layout Plain Layout

        delay(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    delay(1500);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop() {
\end_layout

\begin_layout Plain Layout

    // Read the switch and if pressed, toggle
\end_layout

\begin_layout Plain Layout

    // the built in LED.
\end_layout

\begin_layout Plain Layout

    // BEWARE: Without debouncing, this might be
\end_layout

\begin_layout Plain Layout

    //         somewhat random.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (switchPin.getState() == LOW) {
\end_layout

\begin_layout Plain Layout

        // Switch pressed, toggle the ledPin.
\end_layout

\begin_layout Plain Layout

        ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // A small delay.
\end_layout

\begin_layout Plain Layout

    delay(200);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Input Pin Test Sketch
\begin_inset CommandInset label
LatexCommand label
name "lis:Input-Pin-Test-Sketch"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As with the previous test sketch, you will have to add two new tabs to the
 saved sketch in the IDE, and copy and paste the two files into those new
 tabs.
\end_layout

\begin_layout Standard
So, as you can see, having to copy and paste the same code into each sketch
 gets a bit wearing after a couple of sketches.
 Plus, what happens when the 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 gets updated? Do we really need to go through all our sketches and update
 the header and implementation files, for every sketch? Too tedious.
\end_layout

\begin_layout Standard
What we need to do now is convert the two files, which we added manually
 to both of the example sketches, into a proper library.
\end_layout

\begin_layout Section
Packaging for Download
\begin_inset CommandInset label
LatexCommand label
name "sec:Packaging-for-Download"

\end_inset


\end_layout

\begin_layout Standard
We need to create a new structure to hold the library ready for packaging
 and release.
 This structure is required by the Arduino IDE.
\end_layout

\begin_layout Itemize
Create a new top-level directory and name it 
\begin_inset Quotes eld
\end_inset

digitalPin
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
In this directory, create two new empty files named 
\begin_inset Quotes eld
\end_inset

library.properties
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

keywords.txt
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Beneath the top-level directory, create two sub-directories named 
\begin_inset Quotes eld
\end_inset

src
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

examples
\begin_inset Quotes erd
\end_inset

 – lower case is required here.
\end_layout

\begin_layout Itemize
Copy the two files, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.h
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.cpp
\end_layout

\end_inset

 into the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src
\end_layout

\end_inset

 directory.
\end_layout

\begin_layout Itemize
Copy the two example sketches into the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
examples
\end_layout

\end_inset

 directory.
\end_layout

\begin_layout Standard
In my setup, the structure looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

digitalPin
\end_layout

\begin_layout Plain Layout

|
\end_layout

\begin_layout Plain Layout

+-- src
\end_layout

\begin_layout Plain Layout

|   +-- digitalPin.cpp
\end_layout

\begin_layout Plain Layout

|   +-- digitalPin.h
\end_layout

\begin_layout Plain Layout

+-- examples
\end_layout

\begin_layout Plain Layout

|   +-- digitalPins-input
\end_layout

\begin_layout Plain Layout

|   |   +-- digitalPins-input.ino
\end_layout

\begin_layout Plain Layout

|   +-- digitalPins-output
\end_layout

\begin_layout Plain Layout

|       +-- digitalPins-output.ino
\end_layout

\begin_layout Plain Layout

+-- keywords.txt
\end_layout

\begin_layout Plain Layout

+-- library.properties
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Adding Library.properties
\end_layout

\begin_layout Standard
An example of the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file for our demonstration library would be as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:library-properties-file"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

name=digitalPin
\end_layout

\begin_layout Plain Layout

version=1.0.0
\end_layout

\begin_layout Plain Layout

author=Norman Dunbar <normandunbar@example.com>
\end_layout

\begin_layout Plain Layout

maintainer=Norman Dunbar <normandunbar@example.com>
\end_layout

\begin_layout Plain Layout

sentence=Implements input and output "digitalPin" objects.
\end_layout

\begin_layout Plain Layout

paragraph=A friendly way to use the pins on Arduino boards.
\end_layout

\begin_layout Plain Layout

category=Signal Input/Output
\end_layout

\begin_layout Plain Layout

url=https://github.com/NormanDunbar/digitalPin
\end_layout

\begin_layout Plain Layout

architectures=avr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Library Properties File
\begin_inset CommandInset label
LatexCommand label
name "lis:library-properties-file"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the above is self explanatory.
 Whenever you update the library, 
\emph on
make sure
\emph default
 to change the version number in this file.
 
\end_layout

\begin_layout Standard
Author and Maintainer is a comma separated list, if more than one author/maintai
ner are involved.
 The URL is where the library code and so on will be found for downloading.
 We have not created this repository yet, that comes later.
\end_layout

\begin_layout Standard
Category can be one of:
\end_layout

\begin_layout Itemize
Display 
\end_layout

\begin_layout Itemize
Communication 
\end_layout

\begin_layout Itemize
Signal Input/Output 
\end_layout

\begin_layout Itemize
Sensors 
\end_layout

\begin_layout Itemize
Device 
\end_layout

\begin_layout Itemize
Control 
\end_layout

\begin_layout Itemize
Timing 
\end_layout

\begin_layout Itemize
Data Storage 
\end_layout

\begin_layout Itemize
Data Processing 
\end_layout

\begin_layout Itemize
Other 
\end_layout

\begin_layout Standard
Architecture defaults to 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 but can also be avr for example, or some other platform.
 The default, 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 means 
\begin_inset Quotes eld
\end_inset

everything
\begin_inset Quotes erd
\end_inset

 which might not always be the case.
\end_layout

\begin_layout Subsection
Adding keywords.txt
\end_layout

\begin_layout Standard
The file, keywords.txt is optional, but when supplied, allows the Arduino
 IDE to colour code your library classes, functions, variables and such
 like, with the standard IDE colour coding and syntax highlighting.
 The example file for our library would be as per the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Library-Keywords-File"

\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Note
\series default
: Whenever you see KEYWORD1 or KEYWORD2 or LITERAL1 at the end of a line,
 the 
\begin_inset Quotes eld
\end_inset

space
\begin_inset Quotes erd
\end_inset

 prior to it is a hard TAB character, it is not one or more space characters.
 Without the hard tab, syntax highlighting will not work.
 Make sure your editor is configured to save TAB characters as TABs and
 not as spaces.
\end_layout

\begin_layout Standard
Lines beginning with a 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

 character are comments and ignored by the IDE.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Syntax Coloring Map
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Datatypes (KEYWORD1)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

digitalPin  KEYWORD1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Methods and Functions (KEYWORD2)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

setState   KEYWORD2
\end_layout

\begin_layout Plain Layout

getState   KEYWORD2
\end_layout

\begin_layout Plain Layout

toggleState   KEYWORD2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

######################################
\end_layout

\begin_layout Plain Layout

# Constants (LITERAL1)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

#example    LITERAL1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Library Keywords File
\begin_inset CommandInset label
LatexCommand label
name "lis:Library-Keywords-File"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
KEYWORD1 is generally used for the class names that you define in your library.
 Anything in this category will be highlighted in bold orange when used
 in the IDE.
\end_layout

\begin_layout Itemize
KEYWORD2 is used for the public member functions of the classes in your
 library.
 Usually these are the class methods and will be highlighted in orange text.
\end_layout

\begin_layout Itemize
LITERAL1 is used for any #defines or public enums and typedefs in the library.
\end_layout

\begin_layout Subsection
Packaging the library
\begin_inset CommandInset label
LatexCommand label
name "subsec:Packaging-the-library"

\end_inset


\end_layout

\begin_layout Standard
Once you have all the source files, header files, example sketches, library
 properties and, optionally, the keywords file, you are ready to package
 the library ready for people to download – assuming you did actually upload
 it 
\emph on
somewhere
\emph default
, or to be installed by the Arduino IDE as a zip archive.
\end_layout

\begin_layout Standard
Open a terminal session, navigate to where the digitalPin directory lives
 and run this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

zip -9 -r digitalPin.zip digitalPin
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This simply means, create a zip file named 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.zip
\end_layout

\end_inset

 and to it, add the contents of the directory named 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 plus everything beneath it (-r).
 Compression will be at the highest level.
 (-9).
 The output will resemble the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  adding: digitalPin/ (stored 0%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/src/ (stored 0%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/src/digitalPin.h (deflated 48%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/src/digitalPin.cpp (deflated 60%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/keywords.txt (deflated 70%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/library.properties (deflated 38%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/examples/ (stored 0%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/examples/digitalPins-output/ (stored 0%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/examples/digitalPins-output/digitalPins-output.ino (deflated
 43%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/examples/digitalPins-input/ (stored 0%)
\end_layout

\begin_layout Plain Layout

  adding: digitalPin/examples/digitalPins-input/digitalPins-input.ino (deflated
 49%)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Installing Into the Arduino IDE
\begin_inset CommandInset label
LatexCommand label
name "sec:Installing-Into-theArduino-ide"

\end_inset


\end_layout

\begin_layout Standard
There are a couple of methods available to install a library into the Arduino
 IDE.
 As an zipped file or as unzipped files.
\end_layout

\begin_layout Subsection
Installing Zipped Files
\end_layout

\begin_layout Standard
To install the zip file created previously, all you have to do is:
\end_layout

\begin_layout Itemize
Open the Arduino IDE;
\end_layout

\begin_layout Itemize
Click Sketch\SpecialChar menuseparator
Include Library\SpecialChar menuseparator
Add .ZIP Library
\end_layout

\begin_layout Itemize
When the file selection dialogue opens, navigate to where the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.zip
\end_layout

\end_inset

 file is located, select it and click OK.
\end_layout

\begin_layout Standard
The library and example sketches will be installed.
\end_layout

\begin_layout Subsection
Installing Unzipped Files
\end_layout

\begin_layout Standard
To install the library as an unzipped file, all you have to do is copy the
 top-level directory, 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 in this case, into the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Libraries
\end_layout

\end_inset

 directory beneath the Arduino home location.
 Where exactly is this? 
\end_layout

\begin_layout Standard
Go to File\SpecialChar menuseparator
Preferences in the IDE and check where Sketchbook Location is
 pointing.
 In my case, this was 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
/home/norman/Arduino
\end_layout

\end_inset

 as I'm on Linux.
 Your mileage may vary if you are on Mac or Windows, or if you have configured
 it to be somewhere else.
\end_layout

\begin_layout Standard
Wherever it is, there will be a 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Libraries
\end_layout

\end_inset

 directory.
 Paste the entire library structure into that directory – with the IDE closed.
 You may now restart the IDE to complete the installation.
\end_layout

\begin_layout Subsection
Running the Example Sketches
\end_layout

\begin_layout Standard
After installing the library, we can test it out using the supplied example
 sketches.
\end_layout

\begin_layout Standard
– then restart the IDE.
 Go to File\SpecialChar menuseparator
Examples\SpecialChar menuseparator
digitalPin and chose an example to open.
 You will notice that it no longer has, or needs, the two 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 files.
 
\end_layout

\begin_layout Standard
Compile and upload the sketch and it should operate exactly as before.
\end_layout

\begin_layout Standard
You have now written and installed an Arduino Library, possibly your first.
\end_layout

\begin_layout Section
Creating the GitHub repository
\end_layout

\begin_layout Standard
Open your browser and navigate to 
\begin_inset CommandInset href
LatexCommand href
target "https://github.com"

\end_inset

 and login to your account.
 In the usual manner, create a new repository named 
\begin_inset Quotes eld
\end_inset

digitalPin
\begin_inset Quotes erd
\end_inset

 and tick the options to create a Readme file, and a licence.
 I usually make my licence an MIT one – this basically lets anyone use my
 code for any purpose they like.
\end_layout

\begin_layout Standard
When the repository is built, the screen will display an 
\begin_inset Quotes eld
\end_inset

add files
\begin_inset Quotes erd
\end_inset

 button.
 Click on that.
 Open your file browser and drag the 
\emph on
contents
\emph default
 of your top-level 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 directory onto the indicated area on the screen.
 Drop the files onto this area and they will be uploaded.
\end_layout

\begin_layout Standard
You can now fill in the commit details.
 Mine was logged as 
\begin_inset Quotes eld
\end_inset

initial load
\begin_inset Quotes erd
\end_inset

.
 To complete the upload, click the 
\begin_inset Quotes eld
\end_inset

commit changes
\begin_inset Quotes erd
\end_inset

 button.
\end_layout

\begin_layout Subsection
Check Out the Repository
\end_layout

\begin_layout Standard
In the browser, click the green 
\begin_inset Quotes eld
\end_inset

code
\begin_inset Quotes erd
\end_inset

 button, then select 
\begin_inset Quotes eld
\end_inset

HTTPS
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

SSH
\begin_inset Quotes erd
\end_inset

 as per your usual manner.
 Don't choose the zip file option.
 Click the small button to the right of the text – it looks like a clipboard.
 When you see 
\begin_inset Quotes eld
\end_inset

copied
\begin_inset Quotes erd
\end_inset

 click the code button again to dismiss the pop-up.
\end_layout

\begin_layout Standard
Back in a terminal session, navigate to where you normally keep your source
 code and check out the repository in the usual manner.
 Make sure that you renamed the original 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 directory, if it happens to be in the same location.
\end_layout

\begin_layout Standard
Type in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

git clone
\end_layout

\end_inset

 command, followed by a space, then paste the URL you copied from the browser.
 The command will look similar to this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

git clone git@github.com:NormanDunbar/digitalPin.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obviously, your name will most likely be different to mine! You should then
 see the following output on screen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Cloning into 'digitalPin'...
\end_layout

\begin_layout Plain Layout

remote: Enumerating objects: 17, done.
\end_layout

\begin_layout Plain Layout

remote: Counting objects: 100% (17/17), done.
\end_layout

\begin_layout Plain Layout

remote: Compressing objects: 100% (16/16), done.
\end_layout

\begin_layout Plain Layout

remote: Total 17 (delta 1), reused 0 (delta 0), pack-reused 0
\end_layout

\begin_layout Plain Layout

Receiving objects: 100% (17/17), 4.76 KiB | 304.00 KiB/s, done.
\end_layout

\begin_layout Plain Layout

Resolving deltas: 100% (1/1), done.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can now update the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
README.md
\end_layout

\end_inset

 file and add explain what your library does and how it can be used.
 I find it helpful to mention the examples and to explain them in brief,
 if necessary.
\end_layout

\begin_layout Standard

\series bold
Note
\series default
: The URL on GitHub should match the one you specified way back in the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file.
\end_layout

\begin_layout Section
Installing Into PlatformIO
\begin_inset CommandInset label
LatexCommand label
name "sec:Installing-Into-PlatformIO"

\end_inset


\end_layout

\begin_layout Standard
Because this library is a pure Arduino one, the simplest method of installing
 it for use by PlatformIO is to use the github URL in the 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
lib_deps
\end_layout

\end_inset

 section of the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file in your project.
 I use the command line version of PlatformIO, most of the time, so my workflow
 to create a new Arduino Uno project, using the Arduino Framework – which
 is a necessity as this library is using the Arduino Language – would be
 very similar to:
\end_layout

\begin_layout Itemize
Open a terminal session and navigate to my 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
SourceCode/PlatformIO
\end_layout

\end_inset

 directory – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cd ~/SourceCode/PlatformIO
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
Create a new directory named 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
PIO_digitalPin
\end_layout

\end_inset

 – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

mkdir PIO_digitalPin
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
Change to the new directory – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

cd PIO_digitalPin
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
Create a new project – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pio init -b uno
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
Edit the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file and add 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

lib_deps = https://github.com/NormanDunbar/digitalPin.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 looks like Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Platformio.ini"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[env:uno]
\end_layout

\begin_layout Plain Layout

platform = atmelavr
\end_layout

\begin_layout Plain Layout

board = uno
\end_layout

\begin_layout Plain Layout

framework = arduino
\end_layout

\begin_layout Plain Layout

lib_deps = https://github.com/NormanDunbar/digitalPin.git
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Platformio.ini
\begin_inset CommandInset label
LatexCommand label
name "lis:Platformio.ini"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will notice that the Arduino framework is being utilised.
\end_layout

\begin_layout Standard
I can now create a new source file in the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src
\end_layout

\end_inset

 directory, traditions demands that it be called 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset

, but this is not essential.
 Who am I to fly in the face of tradition.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:main-cpp"

\end_inset

 shows my example 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset

 file.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "digitalPins" library.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include Arduino header -- required by PlatformIO.
\end_layout

\begin_layout Plain Layout

#include "Arduino.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "digitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create a digitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

digitalPin ledPin(LED_BUILTIN, OUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup() {
\end_layout

\begin_layout Plain Layout

    // No setup specifically required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (byte x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(HIGH);
\end_layout

\begin_layout Plain Layout

        delay(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(LOW);
\end_layout

\begin_layout Plain Layout

        delay(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    delay(1500);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop() {
\end_layout

\begin_layout Plain Layout

    // Flash the pin every second.
\end_layout

\begin_layout Plain Layout

    ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

    delay(1000);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\begin_inset CommandInset label
LatexCommand label
name "lis:main-cpp"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Looks familiar? It should, it's a direct copy of the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPins-output.ino
\end_layout

\end_inset

 sketch from Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Output-Pin-Test-Sketch"

\end_inset

! All that is required under PlatformIO to convert a sketch to run under
 PlatformIO is to:
\end_layout

\begin_layout Itemize
Optionally, rename the sketch's ino file to cpp;
\end_layout

\begin_layout Itemize
Add the code 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

#include "Arduino.h"
\end_layout

\end_inset

 at the top.
\end_layout

\begin_layout Standard
I can now compile the sketch with this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And if all is well, I will see a lot of messages on screen, the important
 ones being:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Processing uno (platform: atmelavr; board: uno; framework: arduino)
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

HARDWARE: ATMEGA328P 16MHz, 2KB RAM, 31.50KB Flash
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Library Manager: Installing git+https://github.com/NormanDunbar/digitalPin.git
\end_layout

\begin_layout Plain Layout

git version 2.17.1
\end_layout

\begin_layout Plain Layout

Cloning into '/home/norman/.platformio/.cache/tmp/pkg-installing-_5nbf523'...
\end_layout

\begin_layout Plain Layout

Library Manager: digitalPin @ 1.0.0+sha.1ca1173 has been installed!
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Dependency Graph
\end_layout

\begin_layout Plain Layout

|-- <digitalPin> 1.0.0+sha.1ca1173
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Building in release mode
\end_layout

\begin_layout Plain Layout

Compiling .pio/build/uno/src/main.cpp.o
\end_layout

\begin_layout Plain Layout

Compiling .pio/build/uno/libcd3/digitalPin/digitalPin.cpp.o
\end_layout

\begin_layout Plain Layout

Archiving .pio/build/uno/libcd3/libdigitalPin.a
\end_layout

\begin_layout Plain Layout

Indexing .pio/build/uno/libcd3/libdigitalPin.a
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

    Lots of Arduino files get compiled here
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Archiving .pio/build/uno/libFrameworkArduino.a
\end_layout

\begin_layout Plain Layout

Indexing .pio/build/uno/libFrameworkArduino.a
\end_layout

\begin_layout Plain Layout

Linking .pio/build/uno/firmware.elf
\end_layout

\begin_layout Plain Layout

Checking size .pio/build/uno/firmware.elf
\end_layout

\begin_layout Plain Layout

Advanced Memory Usage is available via "PlatformIO Home > Project Inspect"
\end_layout

\begin_layout Plain Layout

RAM:   [          ]   0.5% (used 11 bytes from 2048 bytes)
\end_layout

\begin_layout Plain Layout

Flash: [          ]   3.6% (used 1174 bytes from 32256 bytes)
\end_layout

\begin_layout Plain Layout

Building .pio/build/uno/firmware.hex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Much of the output has been removed for brevity.
 The output from the compilation shows the following points of note:
\end_layout

\begin_layout Itemize
The hardware I am compiling for and the features that it has with regard
 to memory sizes etc;
\end_layout

\begin_layout Itemize
My library being installed directly from GitHub;
\end_layout

\begin_layout Itemize
The dependency graph showing a list of libraries which my sketch is dependent
 upon – in this example, it's only my own 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library;
\end_layout

\begin_layout Itemize
My sketch's 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset

 source file being compiled;
\end_layout

\begin_layout Itemize
Building the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 static library, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.a
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
The Arduino core library, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
libFrameworkArduino.a
\end_layout

\end_inset

, being built;
\end_layout

\begin_layout Itemize
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Firmware.elf
\end_layout

\end_inset

 being linked to the two libraries;
\end_layout

\begin_layout Itemize
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Firmware.hex
\end_layout

\end_inset

 being created from 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Firmware.elf
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
The final size of the code's Static and Flash RAM usage.
\end_layout

\begin_layout Standard
When linking to create 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
firmware.elf
\end_layout

\end_inset

, the sketch code will be linked with both the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin.a
\end_layout

\end_inset

 and the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
libFrameworkArduino.a
\end_layout

\end_inset

 static libraries.
\end_layout

\begin_layout Standard
The output file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
firmware.hex
\end_layout

\end_inset

 can be uploaded to my Uno board with this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run -t upload
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output on screen will resemble much of the compilation output as checks
 are done to ensure that the code hasn't been changed and required recompilation
, followed by:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Auto-detected: /dev/ttyUSB0
\end_layout

\begin_layout Plain Layout

Uploading .pio/build/uno/firmware.hex
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude: AVR device initialized and ready to accept instructions
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reading | ################################################## | 100% 0.00s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude: Device signature = 0x1e950f (probably m328p)
\end_layout

\begin_layout Plain Layout

avrdude: reading input file ".pio/build/uno/firmware.hex"
\end_layout

\begin_layout Plain Layout

avrdude: writing flash (1174 bytes):
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Writing | ################################################## | 100% 0.21s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude: 1174 bytes of flash written
\end_layout

\begin_layout Plain Layout

avrdude: verifying flash memory against .pio/build/uno/firmware.hex:
\end_layout

\begin_layout Plain Layout

avrdude: load data flash data from input file .pio/build/uno/firmware.hex:
\end_layout

\begin_layout Plain Layout

avrdude: input file .pio/build/uno/firmware.hex contains 1174 bytes
\end_layout

\begin_layout Plain Layout

avrdude: reading on-chip flash data:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Reading | ################################################## | 100% 0.17s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude: verifying ...
\end_layout

\begin_layout Plain Layout

avrdude: 1174 bytes of flash verified
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude: safemode: Fuses OK (E:00, H:00, L:00)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

avrdude done.
  Thank you.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
And now, looking at the Uno board, I see the built in LED flashing away
 in the time honoured tradition.
\end_layout

\begin_layout Chapter
The 
\begin_inset Quotes eld
\end_inset

avrDigitalPin
\begin_inset Quotes erd
\end_inset

 Library
\end_layout

\begin_layout Standard
The problem with the Arduino specific 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library in the preceding section is that it depends on the Arduino language
 being present.
 It can be used in systems such as PlatformIO but only if the project is
 using the Arduino framework, and has specified this in the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file.
 What about people who don't have, or don't want to use Arduino libraries?
 Lets convert the code to remove the Arduino specific function calls and
 make the library usable without requiring all the extra baggage that comes
 with that particular framework.
\end_layout

\begin_layout Standard
We 
\emph on
should
\emph default
 operate on a copy of the existing structure, so, back where our source
 code lives, copy the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 top-level directory and save it as 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 – we will need a new name as it will effectively be a new library, even
 though it does the same work as the current one.
 Rename the header and implementation files to 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.h
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.cpp
\end_layout

\end_inset

 respectively.
\end_layout

\begin_layout Section
Converting the Library
\end_layout

\begin_layout Standard
When completely converted, the library will still be usable with the Arduino
 IDE.
 For this reason, we can keep the existing structure.
 However, we have a lot of editing to do.
 Let's get started.
\end_layout

\begin_layout Subsection
Converting the Header File
\end_layout

\begin_layout Standard
As we are not using the Arduino Language any more, we need to remove anything
 in the header file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.h
\end_layout

\end_inset

, which references it.
 In addition, we will define some new data types to avoid collisions with
 Arduino names – we may wish to use the library with an Arduino sketch –
 and rename the class itself to 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Until now we have used various features of the Arduino Language such as
 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
HIGH
\end_layout

\end_inset

, 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
LOW
\end_layout

\end_inset

, 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
INPUT
\end_layout

\end_inset

 and so on.
 We cannot do that any more so we must define our own equivalent names,
 but as we might still want to use this library in the Arduino IDE, we cannot
 use the same names as before – the compiler will complain.
 
\end_layout

\begin_layout Standard
Edit the header file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.h
\end_layout

\end_inset

, to resemble Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Header-File-1"

\end_inset

 which is the complete new header file.
 The changes will be explained in the following sections.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#ifndef AVRDIGITALPIN_H
\end_layout

\begin_layout Plain Layout

#define AVRDIGITALPIN_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <stdint.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* 
\end_layout

\begin_layout Plain Layout

 * A library to implement a digitalPin class for the Arduino 
\end_layout

\begin_layout Plain Layout

 * IDE.
 This class is designed only for the IDE, but can be
\end_layout

\begin_layout Plain Layout

 * used unchanged by PlatformIO provided that the project
\end_layout

\begin_layout Plain Layout

 *  using it, is using the Arduino Framework and has this
\end_layout

\begin_layout Plain Layout

 *  defined in the platformio.ini file.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Typedef for the pin modes.
\end_layout

\begin_layout Plain Layout

typedef enum pin_Mode : uint8_t {
\end_layout

\begin_layout Plain Layout

    pinINPUT,
\end_layout

\begin_layout Plain Layout

    pinINPUT_PULLUP,
\end_layout

\begin_layout Plain Layout

    pinOUTPUT
\end_layout

\begin_layout Plain Layout

} pinMode_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Typedef for pin names.
 Covers Arduino and AVR naming.
\end_layout

\begin_layout Plain Layout

typedef enum pin_Name : uint8_t  {
\end_layout

\begin_layout Plain Layout

    pinD0 = 0,
\end_layout

\begin_layout Plain Layout

    pinD1,
\end_layout

\begin_layout Plain Layout

    pinD2,
\end_layout

\begin_layout Plain Layout

    pinD3,
\end_layout

\begin_layout Plain Layout

    pinD4,
\end_layout

\begin_layout Plain Layout

    pinD5,
\end_layout

\begin_layout Plain Layout

    pinD6,
\end_layout

\begin_layout Plain Layout

    pinD7,
\end_layout

\begin_layout Plain Layout

    pinD8,
\end_layout

\begin_layout Plain Layout

    pinD9,
\end_layout

\begin_layout Plain Layout

    pinD10,
\end_layout

\begin_layout Plain Layout

    pinD11,
\end_layout

\begin_layout Plain Layout

    pinD12,
\end_layout

\begin_layout Plain Layout

    pinD13,
\end_layout

\begin_layout Plain Layout

    pinD14,
\end_layout

\begin_layout Plain Layout

    pinD15,
\end_layout

\begin_layout Plain Layout

    pinD16,
\end_layout

\begin_layout Plain Layout

    pinD17,
\end_layout

\begin_layout Plain Layout

    pinD18,
\end_layout

\begin_layout Plain Layout

    pinD19,
\end_layout

\begin_layout Plain Layout

    pinA0 = pinD14,
\end_layout

\begin_layout Plain Layout

    pinA1,
\end_layout

\begin_layout Plain Layout

    pinA2,
\end_layout

\begin_layout Plain Layout

    pinA3,
\end_layout

\begin_layout Plain Layout

    pinA4,
\end_layout

\begin_layout Plain Layout

    pinA5,
\end_layout

\begin_layout Plain Layout

    pinPD0 = pinD0,
\end_layout

\begin_layout Plain Layout

    pinPD1,
\end_layout

\begin_layout Plain Layout

    pinPD2,
\end_layout

\begin_layout Plain Layout

    pinPD3,
\end_layout

\begin_layout Plain Layout

    pinPD4,
\end_layout

\begin_layout Plain Layout

    pinPD5,
\end_layout

\begin_layout Plain Layout

    pinPD6,
\end_layout

\begin_layout Plain Layout

    pinPD7,
\end_layout

\begin_layout Plain Layout

    pinPB0 = pinD8,
\end_layout

\begin_layout Plain Layout

    pinPB1,
\end_layout

\begin_layout Plain Layout

    pinPB2,
\end_layout

\begin_layout Plain Layout

    pinPB3,
\end_layout

\begin_layout Plain Layout

    pinPB4,
\end_layout

\begin_layout Plain Layout

    pinPB5,
\end_layout

\begin_layout Plain Layout

    pinPC0 = pinA0,
\end_layout

\begin_layout Plain Layout

    pinPC1,
\end_layout

\begin_layout Plain Layout

    pinPC2,
\end_layout

\begin_layout Plain Layout

    pinPC3,
\end_layout

\begin_layout Plain Layout

    pinPC4,
\end_layout

\begin_layout Plain Layout

    pinPC5
\end_layout

\begin_layout Plain Layout

} pinName_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Typedef for the pin states.
\end_layout

\begin_layout Plain Layout

typedef enum pin_State : uint8_t {
\end_layout

\begin_layout Plain Layout

    pinLOW = 0,
\end_layout

\begin_layout Plain Layout

    pinHIGH
\end_layout

\begin_layout Plain Layout

} pinState_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class avrDigitalPin {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Constructor.
\end_layout

\begin_layout Plain Layout

    avrDigitalPin(pinName_t pinNumber,
\end_layout

\begin_layout Plain Layout

                  pinMode_t Mode);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // There is no destructor as a digitalPin should never
\end_layout

\begin_layout Plain Layout

    //  go out of scope.
 Famous last words?
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Output digitalPins:
\end_layout

\begin_layout Plain Layout

    void setState(pinState_t pinState);
\end_layout

\begin_layout Plain Layout

    void toggleState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Input and Output Pins
\end_layout

\begin_layout Plain Layout

    pinState_t getState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    // Data Direction Register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_ddr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // PORT register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_port;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    // PIN register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_pin;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    // Which bit in the above registers for this pin?
\end_layout

\begin_layout Plain Layout

    uint8_t _bitMask;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Are we an OUTPUT pin?
\end_layout

\begin_layout Plain Layout

    bool _isOutput;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif // AVRDIGITALPIN_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.h Header File
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-Header-File-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first few changes are minimal.
 As we have renamed the file, it's appropriate to change the include guard
 lines, so those have been changed at the very top.
 In addition, we no longer require the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Arduino.h
\end_layout

\end_inset

 header file to be included, so that line has been deleted.
\end_layout

\begin_layout Standard
Following the comments explaining the library, we see a new 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
typedef
\end_layout

\end_inset

 which creates a new data type for the allowed pin modes.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Pin-Modes"

\end_inset

 shows the code.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Typedef for the pin modes.
\end_layout

\begin_layout Plain Layout

typedef enum pin_Mode : uint8_t {
\end_layout

\begin_layout Plain Layout

    pinINPUT,
\end_layout

\begin_layout Plain Layout

    pinINPUT_PULLUP,
\end_layout

\begin_layout Plain Layout

    pinOUTPUT
\end_layout

\begin_layout Plain Layout

} pinMode_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.h - Pin Modes
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-Pin-Modes"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We need to define a of identifying the various pins too.
 The code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Pin-Names"

\end_inset

 is the new 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
typedef
\end_layout

\end_inset

 for pin names.
 The full set on names is already present in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Header-File-1"

\end_inset

, so the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Pin-Names"

\end_inset

 is an excerpt only, for brevity.
 Each pin on an ATmega328P (the microcontroller on your Arduino Uno) has
 a name in a format that slightly resembles the Arduino pin names but also
 in a manner representing the AVR naming convention.
 Feel free to use either, as appropriate.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    // Typedef for pin names.
 Covers Arduino and AVR naming.
\end_layout

\begin_layout Plain Layout

    typedef enum pinName : uint8_t {
\end_layout

\begin_layout Plain Layout

        pinD0 = 0,
\end_layout

\begin_layout Plain Layout

        pinD1,
\end_layout

\begin_layout Plain Layout

        ...
 pinD2 through pinD18 omitted.
 
\end_layout

\begin_layout Plain Layout

        pinD19,
\end_layout

\begin_layout Plain Layout

        pinA0 = pinD14,
\end_layout

\begin_layout Plain Layout

        pinA1,
\end_layout

\begin_layout Plain Layout

        ...
 pinA2 through pinA4 omitted.
\end_layout

\begin_layout Plain Layout

        pinA5,
\end_layout

\begin_layout Plain Layout

        pinPD0 = pinD0,
\end_layout

\begin_layout Plain Layout

        pinPD1,
\end_layout

\begin_layout Plain Layout

        ...
 pinPD2 through pinPD6 omitted.
 
\end_layout

\begin_layout Plain Layout

        pinPD7,
\end_layout

\begin_layout Plain Layout

        pinPB0 = pinD8,
\end_layout

\begin_layout Plain Layout

        pinPB1,
\end_layout

\begin_layout Plain Layout

        ...
 pinPB2 through pinPB5 omitted.
 
\end_layout

\begin_layout Plain Layout

        pinPB5,
\end_layout

\begin_layout Plain Layout

        pinPC0 = pinA0,
\end_layout

\begin_layout Plain Layout

        pinPC1,
\end_layout

\begin_layout Plain Layout

        ...
 pinPC2 through pinPC4 omitted.
 
\end_layout

\begin_layout Plain Layout

        pinPC5
\end_layout

\begin_layout Plain Layout

    } pinName_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.h - Pin Names
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-Pin-Names"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
A0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
A5
\end_layout

\end_inset

 are actually the same as Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D14
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D19
\end_layout

\end_inset

; 
\end_layout

\begin_layout Itemize
AVR pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PD0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PD7
\end_layout

\end_inset

 are equivalent to Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D7
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
AVR pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PB0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PB5
\end_layout

\end_inset

 are Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D8
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D13
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
AVR pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PC0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PC5
\end_layout

\end_inset

 are equivalent to Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
A0
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
A5
\end_layout

\end_inset

 and Arduino pins 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D14
\end_layout

\end_inset

 through 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
D19
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Finally, we have a 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
typedef
\end_layout

\end_inset

 for the pin states, HIGH and LOW.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Pin-States"

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Typedef for the pin states.
\end_layout

\begin_layout Plain Layout

typedef enum pin_State : uint8_t {
\end_layout

\begin_layout Plain Layout

    pinLOW = 0,
\end_layout

\begin_layout Plain Layout

    pinHIGH
\end_layout

\begin_layout Plain Layout

} pinState_t;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.h - Pin States
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-Pin-States"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we have a slightly amended class definition.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-Class-Definition"

\end_inset

 shows the new code.
 The changes are minor in that the class has been renamed, the constructor
 and other functions take and/or return parameters and results using the
 newly defined data types in the previous listings.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class avrDigitalPin {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Constructor.
\end_layout

\begin_layout Plain Layout

    avrDigitalPin(pinName_t pinNumber,
\end_layout

\begin_layout Plain Layout

                  pinMode_t Mode);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // There is no destructor as a digitalPin should never
\end_layout

\begin_layout Plain Layout

    //  go out of scope.
 Famous last words?
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Output digitalPins:
\end_layout

\begin_layout Plain Layout

    void setState(pinState_t pinState);
\end_layout

\begin_layout Plain Layout

    void toggleState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // For Input and Output Pins
\end_layout

\begin_layout Plain Layout

    pinState_t getState();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    // Data Direction Register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_ddr;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // PORT register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_port;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    // PIN register.
\end_layout

\begin_layout Plain Layout

    volatile uint8_t *_pin;
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    // Which bit in the above registers for this pin?
\end_layout

\begin_layout Plain Layout

    uint8_t _bitMask;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Are we an OUTPUT pin?
\end_layout

\begin_layout Plain Layout

    bool _isOutput;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.h - Class Definition
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-Class-Definition"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The major change is to the private member variables.
 Instead of a pin number, we now have three registers and a bit mask.
 The registers, stored as pointers, are used to hold the Data Direction
 Register, DDR; the Port and Pin registers for a pin, plus a bit mask that
 determines which bit in each of the three registers is responsible for
 controlling a particular pin.
 The constructor converts its pin number parameter into the three registers
 and the bit mask.
 This will be discussed shortly.
\end_layout

\begin_layout Standard
You will hopefully note the use of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

volatile
\end_layout

\end_inset

 qualifier on the three register variables? That's because external forces
 can change the state of the registers pointed to by the variables.
 We don't want the compiler optimising the code by getting rid of statements
 which appear to do nothing with these three!
\end_layout

\begin_layout Subsection
Converting the Constructor
\end_layout

\begin_layout Standard
The constructor has to do a lot more work now, unfortunately, as we have
 removed the helpful features of the Arduino Language.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin.cpp-Constructor"

\end_inset

 shows the new code which you can find in the implementation file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.cpp
\end_layout

\end_inset

.
 We still use the 
\begin_inset Quotes eld
\end_inset

standard
\begin_inset Quotes erd
\end_inset

 method of setting the flag indicating an output pin, but after that, it
 gets a little tricky.
\end_layout

\begin_layout Standard
Each pin on an ATmega328P belongs to a set of three registers:
\end_layout

\begin_layout Itemize
The Data Direction Register, or DDR, which tells the pin if it is input
 of output.
 It cannot tell if a pin is input with pullups though;
\end_layout

\begin_layout Itemize
The PORT register, which for output pins determines the state of the pin,
 high or low, depending on the pin's bit in the register.
 For input puns, if the pin's bit is set then the pin is an input with pullup;
\end_layout

\begin_layout Itemize
The PIN register which for input pins allows the state of the pin to be
 read and for output pins, writing a 1 to the pin's bit, will toggle the
 pin.
\end_layout

\begin_layout Standard
We can work out the required set of registers based on the pin number passed
 over.
 This also allows the bit in the bit mask that we need to be calculated
 also, giving us the full set of information to manipulate the pins.
 The Arduino uses a set of tables, stored in Flash RAM to hold details of
 which pin belongs in which set of registers.
 
\end_layout

\begin_layout Standard
As previously mentioned in this chapter, AVR pins are named
\begin_inset Foot
status open

\begin_layout Plain Layout
Well, in one of the AVR naming standards they are.
 There are a few ways to name the pins.
\end_layout

\end_inset

 by their PORT register and the bit number within that PORT register.
 Pin 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PB0
\end_layout

\end_inset

, for example, is bit 0 within the 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTB
\end_layout

\end_inset

 register.
 Bit 0 of 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTB
\end_layout

\end_inset

 has a name, and it's 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTB0
\end_layout

\end_inset

.
 The same bit, bit 0, is used for the pin in the other two registers, 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
DDRB
\end_layout

\end_inset

 and 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PINB
\end_layout

\end_inset

.
 Obviously the bit number within these registers has to be between 0 and
 7 as there are 8 bits in the registers.
\end_layout

\begin_layout Standard
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTD
\end_layout

\end_inset

 has a pin on all of it's bits; 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTB
\end_layout

\end_inset

 and 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
PORTC
\end_layout

\end_inset

 only have 6 bits in use.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
note{Remember, the three member variables in the class are not the actual
 registers, they are pointers to the actual registers.}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Constructor.
\end_layout

\begin_layout Plain Layout

avrDigitalPin::avrDigitalPin(pinName_t pinNumber,
\end_layout

\begin_layout Plain Layout

                             pinMode_t Mode)
\end_layout

\begin_layout Plain Layout

    : _isOutput(false)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    // Calculate the PORT, PIN and DDR from the pin.
\end_layout

\begin_layout Plain Layout

    // D0 through D7 = PORTD,
\end_layout

\begin_layout Plain Layout

    // D8 through D13 = PORTB,
\end_layout

\begin_layout Plain Layout

    // D14 (A0) through D19 (A5) = PORTC.
\end_layout

\begin_layout Plain Layout

    if (pinNumber <= pinD7) {
\end_layout

\begin_layout Plain Layout

        // We are in D registers.
\end_layout

\begin_layout Plain Layout

        _port = &PORTD;
\end_layout

\begin_layout Plain Layout

        _pin = &PIND;
\end_layout

\begin_layout Plain Layout

        _ddr = &DDRD;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // PinBit is the same as the pin.
\end_layout

\begin_layout Plain Layout

        _bitMask = pinNumber;
\end_layout

\begin_layout Plain Layout

    } else if (pinNumber <= pinD13) {
\end_layout

\begin_layout Plain Layout

        // We are in B registers.
\end_layout

\begin_layout Plain Layout

        _port = &PORTB;
\end_layout

\begin_layout Plain Layout

        _pin = &PINB;
\end_layout

\begin_layout Plain Layout

        _ddr = &DDRB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // PinBit is the pin - 8
\end_layout

\begin_layout Plain Layout

        _bitMask = pinNumber - 8;
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

        // We are in C registers.
\end_layout

\begin_layout Plain Layout

        _port = &PORTC;
\end_layout

\begin_layout Plain Layout

        _pin = &PINC;
\end_layout

\begin_layout Plain Layout

        _ddr = &DDRC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // PinBit is the pin - 14
\end_layout

\begin_layout Plain Layout

        _bitMask = pinNumber - 14;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Now we have the registers, configure the pin.
\end_layout

\begin_layout Plain Layout

    if (Mode == pinOUTPUT) {
\end_layout

\begin_layout Plain Layout

        // OUTPUT_pin: set bit in DDRx register.
\end_layout

\begin_layout Plain Layout

        *_ddr |= (1 << _bitMask);
\end_layout

\begin_layout Plain Layout

        _isOutput = true;
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

        // INPUT [+/-PULLUP].
\end_layout

\begin_layout Plain Layout

        // Clear bit in DDRx register.
\end_layout

\begin_layout Plain Layout

        *_ddr &= ~(1 << _bitMask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (Mode == pinINPUT) {
\end_layout

\begin_layout Plain Layout

            // INPUT: Clear bit in PORTx register.
\end_layout

\begin_layout Plain Layout

            *_port &= ~(1 << _bitMask);
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            // INPUT_PULLUP: Set bit in PORTx Register.
\end_layout

\begin_layout Plain Layout

            *_port |= (1 << _bitMask);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.cpp - Constructor
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin.cpp-Constructor"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the pin number has been converted to a PORT, PIN and DDR register,
 we can set the requested mode.
 By default, any bit in the DDR register which is a 0 indicates an input
 pin, while a 1 shows an output pin.
 
\end_layout

\begin_layout Standard
Output pin modes are easy, all we have to do is set the corresponding bit
 in the DDR register pointed to by 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
_DDR
\end_layout

\end_inset

.
 We can't just set the whole register value as we must preserve all other
 bits in the register apart from the one relating to our pin number.
 This is why we use a bitwise OR operator to set the correct bit.
\end_layout

\begin_layout Standard
Input pins, with or without pullups, need to clear the appropriate bit in
 the DDR register, so we use a bitwise AND operator to clear a single bit,
 preserving all the others.
 Our bitmask has a single bit set to 1, so we invert that to give a value
 with the bit set to zero, and AND that with the existing contents of the
 DDR register to clear the bit.
\end_layout

\begin_layout Standard
If the pullup resistors need to be enabled, then the appropriate bit in
 the PORT register is set to 1.
 As the PORT registers are used for output pins, the Atmel engineers decided
 to make them useful and added this option.
 They did a similar thing with the PIN register for output pins – that will
 toggle the pin.
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin.cpp-Constructor"

\end_inset

 shows the full source code for the newly modified constructor, and there's
 no Arduino code in sight!
\end_layout

\begin_layout Subsection
Setting Output State
\end_layout

\begin_layout Standard
The 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
setState()
\end_layout

\end_inset

 function should be changed to match the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin.cpp-setState-function"

\end_inset

.
 The changes are minor – the 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
pinState
\end_layout

\end_inset

 parameter's type is now a 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
pinState_t
\end_layout

\end_inset

 and instead of calling the Arduino 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
digitalWrite()
\end_layout

\end_inset

 function, we simply make a pin high or low, by setting of clearing a single
 bit in the appropriate PORT register.
 This is exactly what 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
digitalWrite()
\end_layout

\end_inset

 does when it gets done making various checks and converting the pin number
 to the three required registers, and so forth.
\end_layout

\begin_layout Standard
Because we only want output pins to change their state under software control,
 we check to see if the pin is an input pin, and if so, we exit from the
 function.
 If the pin is indeed an output pin, we set or clear the correct bit in
 its PORT register depending on whether the request was for a high or low
 state.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// For Output digitalPins:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Set the pin state to high or low.
\end_layout

\begin_layout Plain Layout

void avrDigitalPin::setState(pinState_t pinState)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    if (!_isOutput)
\end_layout

\begin_layout Plain Layout

        return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (pinState)
\end_layout

\begin_layout Plain Layout

        *_port |= (1 << _bitMask);
\end_layout

\begin_layout Plain Layout

    else
\end_layout

\begin_layout Plain Layout

        *_port &= ~(1 << _bitMask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.cpp - setState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin.cpp-setState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Toggling Output State
\end_layout

\begin_layout Standard
The 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
toggleState()
\end_layout

\end_inset

 function should be changed to match the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin.cpp-toggleState-function"

\end_inset

.
 
\end_layout

\begin_layout Standard
Because we only want output pins to change their state under software control,
 we check to see if the pin is an input pin, and if so, we exit from the
 function.
 If the pin is indeed an output pin, we set the correct bit in its PIN register
 which will cause the pin's state to toggle.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Toggle the current pin state.
\end_layout

\begin_layout Plain Layout

void avrDigitalPin::toggleState()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    if (!_isOutput)
\end_layout

\begin_layout Plain Layout

        return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    *_pin |= (1 << _bitMask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.cpp - toggleState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin.cpp-toggleState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Reading Input State
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin.cpp-getState-function"

\end_inset

 shows the changes required for the 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
getState()
\end_layout

\end_inset

 function which now will return a 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
pinState_t
\end_layout

\end_inset

 data type for the result, as opposed to the previous 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
uint8_t
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// For Input and Output Pins.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Read the pin state.
\end_layout

\begin_layout Plain Layout

pinState_t avrDigitalPin::getState()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    return (pinState_t)(!!(*_pin & (1 << _bitMask)));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin.cpp - getState() Function
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin.cpp-getState-function"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To read the state of a pin, you check the proper bit in the PIN register.
 A 1 shows a pin is high and a zero shows a low for the pin.
 As the function returns a 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
pinState_t
\end_layout

\end_inset

, we have to cast the result of a bitwise AND – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

(*_pin & (1 << _bitMask))
\end_layout

\end_inset

 – converted to a 1 or a 0 by the two consecutive 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!
\end_layout

\end_inset

 operators.
 How does this work?
\end_layout

\begin_layout Standard
Let us assume we need to check bit 3.
 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
_bitMask
\end_layout

\end_inset

 will be 3 and we create a mask where there is a single 1 bit in bit 3,
 the value 
\begin_inset Formula $2^{3}$
\end_inset

.
 We then AND that value with the PIN register to get a value which is either
 0, if the pin was low, or 
\begin_inset Formula $2^{3}$
\end_inset

 if the pin was high.
 The first 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!
\end_layout

\end_inset

 converts the resultt to a 1, if the value was 0, or to 0 if the value was
 
\begin_inset Formula $2^{3}$
\end_inset

.
 The second 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!
\end_layout

\end_inset

 converts that into a 0 or a 1, which is the final result.
 This is then type cast into a 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
pinState_t
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The use of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

!!
\end_layout

\end_inset

 in this way saves a shift, where normally we would AND the PIN register
 with 
\begin_inset Formula $2^{3}$
\end_inset

 then shift the result to the right by 3 bits (equivalent to dividing by
 
\begin_inset Formula $2^{3}$
\end_inset

) to leave either a 1 or a 0 result – 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

((*_pin & (1 << _bitMask)) >> _bitMask)
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Testing the library
\end_layout

\begin_layout Standard
The process for testing this library in the Arduino IDE is exactly as we
 did back in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Testing-the-digitalPin-library"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Testing-the-digitalPin-library"

\end_inset

 when we tested the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library.
 The process will be briefly covered here, but check back if you need more
 detail.
\end_layout

\begin_layout Subsection
Arduino Testing
\end_layout

\begin_layout Standard
Open the Arduino IDE and create a new sketch and save the currently blank
 sketch under the name 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPins-output.ino
\end_layout

\end_inset

.
 Add two new tabs, as previously done, and name these as 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPins.h
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPins.cpp
\end_layout

\end_inset

.
 Copy and paste the code from the appropriate files into these two tabs
 and save them.
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AvrDigitalPin-output-sketch"

\end_inset

 shows the code we will use to test output pins using the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library.
 The following changes were made from the corresponding sketch used to test
 the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library:
\end_layout

\begin_layout Itemize
The comment at the top was changed to reference the new library name;
\end_layout

\begin_layout Itemize
The header file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.h
\end_layout

\end_inset

, for the new library was included;
\end_layout

\begin_layout Itemize
The 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
ledPin
\end_layout

\end_inset

 variable is now of the new class type, 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
That is all we needed to change.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "avrDigitalPins" library.
\end_layout

\begin_layout Plain Layout

 * 
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create a digitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

avrDigitalPin ledPin(pinD13, pinOUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup() {
\end_layout

\begin_layout Plain Layout

    // No setup specifically required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (byte x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinHIGH);
\end_layout

\begin_layout Plain Layout

        delay(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinLOW);
\end_layout

\begin_layout Plain Layout

        delay(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    delay(1500);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop() {
\end_layout

\begin_layout Plain Layout

    // Flash the pin every second.
\end_layout

\begin_layout Plain Layout

    ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

    delay(1000);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
The AvrDigitalPin-output Sketch
\begin_inset CommandInset label
LatexCommand label
name "lis:AvrDigitalPin-output-sketch"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The sketch can be compiled and uploaded in the normal manner and you should
 see a set of 5 quick flashes followed by the ubiquitous 
\begin_inset Quotes eld
\end_inset

blink the LED every second
\begin_inset Quotes erd
\end_inset

 activity.
\end_layout

\begin_layout Subsection
PlatformIO Testing - With Arduino Framework
\end_layout

\begin_layout Standard
As this has been covered in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Installing-Into-PlatformIO"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Installing-Into-PlatformIO"

\end_inset

, it will only be briefly explained.
 Once again, refer to Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Installing-Into-PlatformIO"

\end_inset

 if you need detailed instructions.
\end_layout

\begin_layout Standard
After creating a new directory and project, the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file was edited to add the 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
lib_deps
\end_layout

\end_inset

 line as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Platformio.ini-1"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[env:uno]
\end_layout

\begin_layout Plain Layout

platform = atmelavr
\end_layout

\begin_layout Plain Layout

board = uno
\end_layout

\begin_layout Plain Layout

framework = arduino
\end_layout

\begin_layout Plain Layout

lib_deps = https://github.com/NormanDunbar/avrDigitalPin.git
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Platformio.ini
\begin_inset CommandInset label
LatexCommand label
name "lis:Platformio.ini-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I can now create a new source file in the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src
\end_layout

\end_inset

 directory, traditions demands that it be called 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset

, but this is not essential.
 Who am I to fly in the face of tradition.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:main-cpp-1"

\end_inset

 shows my example 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
main.cpp
\end_layout

\end_inset

 file.
\end_layout

\begin_layout Standard
You will note that the usual 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

#include Arduino.h
\end_layout

\end_inset

 line is missing.
 Because the sketch doesn't use the Arduino framework, it won't be necessary
 to include the header.
 If you examine the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:main-cpp-1"

\end_inset

 you should notice that we have a 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
main()
\end_layout

\end_inset

 function and 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
setup()
\end_layout

\end_inset

 and 
\begin_inset Flex FunctionName
status open

\begin_layout Plain Layout
loop()
\end_layout

\end_inset

 are missing.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "avrDigitalPins" library.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Header for _delay_ms() also required.
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create an avrDigitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

avrDigitalPin ledPin(pinD13, pinOUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

    // SETUP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // No further setup required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (uint8_t x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinHIGH);
\end_layout

\begin_layout Plain Layout

        _delay_ms(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinLOW);
\end_layout

\begin_layout Plain Layout

        _delay_ms(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    _delay_ms(1500);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // LOOP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while (1) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Flash the pin every second.
\end_layout

\begin_layout Plain Layout

        ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

        _delay_ms(1000);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
main.cpp
\begin_inset CommandInset label
LatexCommand label
name "lis:main-cpp-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I can now compile the sketch with this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you look carefully, however, you will see all the usual Arduino files
 being compiled and used to create the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
libFrameworkArduino.a
\end_layout

\end_inset

 library.
 This is a minor annoyance, but is simply because the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file says to use the Arduino framework.
 At link time, however, none of the Arduino functions will be linked into
 the final executable as they are not used.
 You can tell this by the size of the compiled code, using the example under
 discussion, it compiles to 428 bytes of Flash RAM and 8 bytes of Static
 RAM.
 An Arduino sketch uses a minimum of 9 bytes Static RAM and even the blink
 sketch uses 924 bytes of Flash RAM.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RAM:   [          ]   0.4% (used 8 bytes from 2048 bytes)
\end_layout

\begin_layout Plain Layout

Flash: [          ]   1.3% (used 428 bytes from 32256 bytes)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, you don't have to take my word for it just yet, when I show you
 how to install the library as a native PlatformIO library, you will see
 the same sized sketch and in that example, the Arduino framework will not
 be being used, or compiled.
 This will be covered in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:PlatformIO-Testing-without-a-framework"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:PlatformIO-Testing-without-a-framework"

\end_inset

.
\end_layout

\begin_layout Standard
The reason for 
\begin_inset Quotes eld
\end_inset

telling lies
\begin_inset Quotes erd
\end_inset

 about the framework is because the library is currently in the structure
 of an Arduino library and PlatformIO knows how to download and install
 an Arduino library but only when the Arduino framework is in use.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:PlatformIO-Testing-without-a-framework"

\end_inset

 will remedy this, when we test without a framework.
\end_layout

\begin_layout Standard
That aside, if all is well with the compilation, the code can be uploaded
 to my Uno board with this command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run -t upload
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Looking at the board now, I see the built in LED flashing away as is tradition.
\end_layout

\begin_layout Subsection
PlatformIO Testing - Without a Framework
\begin_inset CommandInset label
LatexCommand label
name "subsec:PlatformIO-Testing-without-a-framework"

\end_inset


\end_layout

\begin_layout Standard
As discussed, the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library is in the structure of an Arduino library.
 PlatformIO knows how to install one of these provided the project is using
 the Arduino Framework.
 Without it, you get compilation errors similar to these:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Verbose mode can be enabled via `-v, --verbose` option
\end_layout

\begin_layout Plain Layout

CONFIGURATION: https://docs.platformio.org/page/boards/atmelavr/uno.html
\end_layout

\begin_layout Plain Layout

PLATFORM: Atmel AVR (3.3.0) > Arduino Uno
\end_layout

\begin_layout Plain Layout

HARDWARE: ATMEGA328P 16MHz, 2KB RAM, 31.50KB Flash
\end_layout

\begin_layout Plain Layout

DEBUG: Current (avr-stub) On-board (avr-stub, simavr)
\end_layout

\begin_layout Plain Layout

PACKAGES: 
\end_layout

\begin_layout Plain Layout

 - toolchain-atmelavr 1.70300.191015 (7.3.0)
\end_layout

\begin_layout Plain Layout

LDF: Library Dependency Finder -> http://bit.ly/configure-pio-ldf
\end_layout

\begin_layout Plain Layout

LDF Modes: Finder ~ chain, Compatibility ~ soft
\end_layout

\begin_layout Plain Layout

Found 0 compatible libraries
\end_layout

\begin_layout Plain Layout

Scanning dependencies...
\end_layout

\begin_layout Plain Layout

No dependencies
\end_layout

\begin_layout Plain Layout

Building in release mode
\end_layout

\begin_layout Plain Layout

Compiling .pio/build/uno/src/main.o
\end_layout

\begin_layout Plain Layout

src/main.cpp:9:10: fatal error: avrDigitalPin.h: No such file or directory
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

*************************************************************
\end_layout

\begin_layout Plain Layout

* Looking for avrDigitalPin.h dependency? Check our library registry!
\end_layout

\begin_layout Plain Layout

*
\end_layout

\begin_layout Plain Layout

* CLI  > platformio lib search "header:avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

* Web  > https://platformio.org/lib/search?query=header:avrDigitalPin.h
\end_layout

\begin_layout Plain Layout

*
\end_layout

\begin_layout Plain Layout

*************************************************************
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 #include "avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

          ^~~~~~~~~~~~~~~~~
\end_layout

\begin_layout Plain Layout

compilation terminated.
\end_layout

\begin_layout Plain Layout

*** [.pio/build/uno/src/main.o] Error 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It's the same 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file, it just doesn't mention the framework to use.
 Can we fix it? We can, and in two ways:
\end_layout

\begin_layout Itemize
Install the library locally, for our own use in this project;
\end_layout

\begin_layout Itemize
Publish the library for everyone to use, and install from the library repository.
\end_layout

\begin_layout Standard
We will discuss how to install locally for our own use next.
 There's a bit more work to do in order to publish the library, that will
 be dealt with later in Sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Registering-with-PlatformIO"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Registering-with-PlatformIO"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Installing-into-the-project"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Installing-into-the-project"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Installing Locally
\end_layout

\begin_layout Standard
To install the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library locally, for use by a project, all you need to do is:
\end_layout

\begin_layout Itemize
Create a directory for the project and change into it:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir pio_output
\end_layout

\begin_layout Plain Layout

cd pio_output
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create the project:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio init -b uno
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create a 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
lib/avrDigitalPin
\end_layout

\end_inset

 directory:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir lib/avrDigitalPin
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Copy the existing Arduino structured library source and header files over:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cp ../avrDigitalPin/src/* lib/avrDigitalPin
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Edit 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 and delete this line: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

framework = arduino
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src/main.cpp
\end_layout

\end_inset

 and add in the code from Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:main-cpp-1"

\end_inset

.
\end_layout

\begin_layout Itemize
Compile the project:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Upload the firmware:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run -t upload
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will note from the compilation output that none of the Arduino files
 were compiled and the final size of the project's executable is 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RAM:   [          ]   0.4% (used 8 bytes from 2048 bytes)
\end_layout

\begin_layout Plain Layout

Flash: [          ]   1.3% (used 428 bytes from 32256 bytes)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the same as the testing with the Arduino framework example, and
 proves that in that example, none of the Arduino files were linked to the
 final executable, even though they were compiled.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
note{In older versions of PlatformIO, a library could be installed globally
 for use by any project.
 Unfortunately, libraries with the same name but for different platforms
 got muddled up and corrupted the compilation as, for example, an Arduino
 library for an AVR microcontroller is no good to an ESP32 mucrocontroller.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Since PlatformIO version 5.0, global libraries are no longer allowed.
 Any project wishing to use a library has to install it into it's own project
 structure as previously described.
 This leads to the same library code being found all over your project hierarchy
 which is a bad thing, but, it gives youthe option to use different versions
 of the same library in different projects.
 Good and bad.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Of course, there's still a way to get the library installed once and used
 by any project, your friend here is the 
\backslash
texttt{lib
\backslash
_extra
\backslash
_dirs} option in 
\backslash
texttt{platformio.ini} as will be explained in Section 
\backslash
ref{sec:Installing-Globally}, 
\backslash
nameref{sec:Installing-Globally}.}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Arduino Library Packaging
\end_layout

\begin_layout Standard
The process to package up the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library is exactly the same as the process described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Packaging-for-Download"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Packaging-for-Download"

\end_inset

 apart from the fact that the library name is different and we already have
 the desired structure as we copied everything from the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

 library we initially created.
\end_layout

\begin_layout Standard
As we have changed the library code quite a bit, we need to update the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file and the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
keywords.txt
\end_layout

\end_inset

 file to suit.
\end_layout

\begin_layout Subsection
Updating Library.Properties
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:library-properties-file-1"

\end_inset

 is the new 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 for the 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 library.
 You can see that only the 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sentence
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

url
\begin_inset Quotes erd
\end_inset

 have been changed since we wrote the file for 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
digitalPin
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

name=avrDigitalPin
\end_layout

\begin_layout Plain Layout

version=1.0.0
\end_layout

\begin_layout Plain Layout

author=Norman Dunbar <normandunbar@example.com>
\end_layout

\begin_layout Plain Layout

maintainer=Norman Dunbar <normandunbar@example.com>
\end_layout

\begin_layout Plain Layout

sentence=Implements input and output "avrDigitalPin" objects.
\end_layout

\begin_layout Plain Layout

paragraph=A friendly way to use the pins on Arduino boards.
\end_layout

\begin_layout Plain Layout

category=Signal Input/Output
\end_layout

\begin_layout Plain Layout

url=https://github.com/NormanDunbar/avrDigitalPin
\end_layout

\begin_layout Plain Layout

architectures=avr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Library Properties File
\begin_inset CommandInset label
LatexCommand label
name "lis:library-properties-file-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Updating Keywords.txt
\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Library-Keywords-File-1"

\end_inset

 is the new 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
keywords.txt
\end_layout

\end_inset

 file.
 You can see in this version of the file, that a number of LITERAL1 entries
 have been made to cover the various pin modes, names and states.
 The function names remain the same as per digitalPin but obvioulsy, the
 class name, KEYWORD1, has been changed to suit.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Syntax Coloring Map
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Datatypes (KEYWORD1)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

digitalPin	KEYWORD1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

# Methods and Functions (KEYWORD2)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

setState	KEYWORD2
\end_layout

\begin_layout Plain Layout

getState	KEYWORD2
\end_layout

\begin_layout Plain Layout

toggleState	KEYWORD2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

######################################
\end_layout

\begin_layout Plain Layout

# Constants (LITERAL1)
\end_layout

\begin_layout Plain Layout

#######################################
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Pin Modes:
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinINPUT	LITERAL1
\end_layout

\begin_layout Plain Layout

pinINPUT_PULLUP	LITERAL1
\end_layout

\begin_layout Plain Layout

pinOUTPUT	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Pin States:
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinLOW	LITERAL1
\end_layout

\begin_layout Plain Layout

pinHIGH	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

# Pin Names:
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinD0	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD1	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD2	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD3	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD4	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD5	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD6	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD7	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD8	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD9	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD10	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD11	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD12	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD13	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD14	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD15	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD16	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD17	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD18	LITERAL1
\end_layout

\begin_layout Plain Layout

pinD19	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinA0	LITERAL1
\end_layout

\begin_layout Plain Layout

pinA1	LITERAL1
\end_layout

\begin_layout Plain Layout

pinA2	LITERAL1
\end_layout

\begin_layout Plain Layout

pinA3	LITERAL1
\end_layout

\begin_layout Plain Layout

pinA4	LITERAL1
\end_layout

\begin_layout Plain Layout

pinA5	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinPD0	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD1	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD2	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD3	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD4	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD5	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD6	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPD7	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinPB0	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPB1	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPB2	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPB3	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPB4	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPB5	LITERAL1
\end_layout

\begin_layout Plain Layout

#
\end_layout

\begin_layout Plain Layout

pinPC0	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPC1	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPC2	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPC3	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPC4	LITERAL1
\end_layout

\begin_layout Plain Layout

pinPC5	LITERAL1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Library Keywords File
\begin_inset CommandInset label
LatexCommand label
name "lis:Library-Keywords-File-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Packaging the Library
\end_layout

\begin_layout Standard
This process is exactly the same, apart from filenames, as described in
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Packaging-the-library"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:Packaging-the-library"

\end_inset

 and will not be discussed in any further detail here, only brief bullet
 points will be necessary.
 Please refer back to Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Packaging-the-library"

\end_inset

 for full details.
\end_layout

\begin_layout Itemize
Zip the library's top level directory into a zip file.
 The zip file will usually be named for the library, so 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.zip
\end_layout

\end_inset

 will be the created file in this case.
\end_layout

\begin_layout Itemize
The zip file should contain the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
examples
\end_layout

\end_inset

 directories, the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file and the, optional, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
keywords.txt
\end_layout

\end_inset

 file.
\end_layout

\begin_layout Section
Packaging PlatformIO Libraries
\end_layout

\begin_layout Standard
We've already discussed that the PlatformIO system can understand the structure
 of an Arduino IDE library, but only when using the Arduino framework.
 We have see how the library structure is happily used to install the library
 without a hitch, as long as that framework is in use – even if the application
 code doesn't actually use any of the Arduino functions, it will still compile
 all the Arduino file, build a library and then, ignore it!
\end_layout

\begin_layout Standard
This is a bug bear of mine, so how can we create a library that PlatformIO
 can use, without any particular framework being required? There are a number
 of simple steps to carry out:
\end_layout

\begin_layout Itemize
Create the required directory structure;
\end_layout

\begin_layout Itemize
Optionally, create a GitHub repository;
\end_layout

\begin_layout Itemize
Create the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.json
\end_layout

\end_inset

 file describing the library;
\end_layout

\begin_layout Itemize
Package & register the library with PlatformIO;
\end_layout

\begin_layout Itemize
Wait!
\end_layout

\begin_layout Itemize
Install or use the library with PlatformIO.
\end_layout

\begin_layout Subsection
Creating the Library Structure
\end_layout

\begin_layout Standard
The structure of a library for PlatformIO is quite simple and should look
 like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

avrDigitalPin
\end_layout

\begin_layout Plain Layout

|
\end_layout

\begin_layout Plain Layout

+-- src
\end_layout

\begin_layout Plain Layout

|   +-- avrDigitalPin.cpp
\end_layout

\begin_layout Plain Layout

|
\end_layout

\begin_layout Plain Layout

+-- include
\end_layout

\begin_layout Plain Layout

|   +-- avrDigitalPin.h
\end_layout

\begin_layout Plain Layout

|
\end_layout

\begin_layout Plain Layout

+-- examples
\end_layout

\begin_layout Plain Layout

|   +-- avrDigitalPin-input.cpp
\end_layout

\begin_layout Plain Layout

|   +-- avrDigitalPin-output.cpp
\end_layout

\begin_layout Plain Layout

|
\end_layout

\begin_layout Plain Layout

+-- library.json
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At the top level is a directory named after the library.
 This is not mandatory, but is extremely helpful.
 Beneath that are the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
include
\end_layout

\end_inset

 directories where the library's 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
*.cpp
\end_layout

\end_inset

 and 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
*.h
\end_layout

\end_inset

 files respectively, are to be located.
 The 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
examples
\end_layout

\end_inset

 directory contains all the example applications.
 C++ source and header files can live here.
\end_layout

\begin_layout Standard
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Library.json
\end_layout

\end_inset

, is similar to the Arduino's 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file, it describes the library and where it can be found on the internet,
 on GitHub for example, and so on.
\end_layout

\begin_layout Standard
We will first create a GitHub repository for the library.
 As we already have an 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

 repository, this PlatformIO specific one will need a different name.
 I'm calling mine 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
pioDigitalPin
\end_layout

\end_inset

, however, the library is still named 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

.
 Once we checkout the repository, we can easily create the required structure.
\end_layout

\begin_layout Subsection
Creating a GitHub repository
\end_layout

\begin_layout Standard
Point your browser at https://github.com and create a new repository in the
 usual manner.
 As mentioned, mine is called 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
pioDigitalPin
\end_layout

\end_inset

 as I need a different name to 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

, but the library will still be named 
\begin_inset Flex ClassName
status open

\begin_layout Plain Layout
avrDigitalPin
\end_layout

\end_inset

.
 As usual, the repository will have a 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
Readme
\end_layout

\end_inset

 file, a 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
License
\end_layout

\end_inset

 and a 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
.gitignore
\end_layout

\end_inset

 set up as part of the initial creation.
 My license is MIT and the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
.gitignore
\end_layout

\end_inset

 is configured for C++.
 
\end_layout

\begin_layout Standard
Once created, click the green 
\begin_inset Quotes eld
\end_inset

code
\begin_inset Quotes erd
\end_inset

 button, as before, and choose your download method.
 Don't choose the zipped tarball through! I chose to use the ssh variant
 as I have appropriate keys loaded into my user account.
 Since 13th August 2021, you cannot use a username/password combination
 to access a repository.
 If you choose 
\begin_inset Quotes eld
\end_inset

https
\begin_inset Quotes erd
\end_inset

 then you will need to create an access token and use that to allow you
 to be able to use your repository.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
warning{Beware.
 GitHub will show your access token details 
\backslash
emph{only once} and then it is gone.
 When your details are displayed, 
\backslash
emph{make a note!} If you refresh or navigate off the page, you will never
 see them again.
 Take care.}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Switch to your Source Code directory and clone your new, blank repository.
 In my case it was a simple:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 git clone git@github.com:NormanDunbar/pioDigitalPin.git
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Change into the pioDigitalPin directory and execute the following commands:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir -p {src,examples,include}
\end_layout

\begin_layout Plain Layout

touch library.json
\end_layout

\begin_layout Plain Layout

cp ../avrDigitalPin/src/*.cpp src/
\end_layout

\begin_layout Plain Layout

cp ../avrDigitalPin/src/*.h include/
\end_layout

\begin_layout Plain Layout

touch examples/avrDigitalPin-input.cpp
\end_layout

\begin_layout Plain Layout

touch examples/avrDigitalPin-output.cpp
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We now need to update the currently blank 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.json
\end_layout

\end_inset

 file.
\end_layout

\begin_layout Subsection
Create 
\begin_inset Quotes eld
\end_inset

library.json
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Library.json"

\end_inset

 shows the minimum 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.json
\end_layout

\end_inset

 file required to publish a PlatformIO library.
 The content is pretty much similar to that in the Arduino version's 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
library.properties
\end_layout

\end_inset

 file, but in JSON format as opposed to plain text.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  "name": "avrDigitalPin",
\end_layout

\begin_layout Plain Layout

  "version": "1.0.0",
\end_layout

\begin_layout Plain Layout

  "description": "Example library for PlatformIO.
 Demonstrates avrDigitalPin class for avr platform.",
\end_layout

\begin_layout Plain Layout

  "keywords": "pin, digitalPin, avrDigitalPin",
\end_layout

\begin_layout Plain Layout

  "repository":
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

    "type": "git",
\end_layout

\begin_layout Plain Layout

    "url": "https://github.com/NormanDunbar/pioDigitalPin"
\end_layout

\begin_layout Plain Layout

  },
\end_layout

\begin_layout Plain Layout

  "authors":
\end_layout

\begin_layout Plain Layout

  [
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

      "name": "Norman Dunbar",
\end_layout

\begin_layout Plain Layout

      "email": "norman@dunbar-it.co.uk",
\end_layout

\begin_layout Plain Layout

      "url": "http://www.dunbar-it.co.uk/contact-us/",
\end_layout

\begin_layout Plain Layout

      "maintainer": true
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  ],
\end_layout

\begin_layout Plain Layout

  "license": "MIT",
\end_layout

\begin_layout Plain Layout

  "homepage": "https://github.com/NormanDunbar/pioDigitalPin",
\end_layout

\begin_layout Plain Layout

  "frameworks": "*",
\end_layout

\begin_layout Plain Layout

  "platforms": "atmelavr"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Library.json
\begin_inset CommandInset label
LatexCommand label
name "lis:Library.json"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because this library can, hopefully, be used on all AVR type microcontrollers,
 the JSON specifies that the platform is 
\begin_inset Quotes eld
\end_inset

atmelavr
\begin_inset Quotes erd
\end_inset

, and the list of frameworks to which it applies is all of them.
 Had the code been specific to one or two particular frameworks, you would
 specify those frameworks here as a comma-space separated list.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tip{In this case, the code is specific to no frameworks, not to all of them!
 However, the platform determines the microcontroller family and by specifying
 that it applies to all frameworks, it really means to none of them -- because
 it makes no difference, the framework chosen isn't used or needed by the
 library.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

It confused me, that's for sure!}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Create the Example Code
\end_layout

\begin_layout Standard
We 
\begin_inset Quotes eld
\end_inset

touched
\begin_inset Quotes erd
\end_inset

 two example applications when we created the directory structure.
 Now is the time to add the code in Listings 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-output-example"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-input-example"

\end_inset

 to the two example files.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-output-example"

\end_inset

 is 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin-output
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "avrDigitalPins" library.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Header for _delay_ms() also required.
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create an avrDigitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

avrDigitalPin ledPin(pinD13, pinOUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

    // SETUP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // No further setup required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (uint8_t x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinHIGH);
\end_layout

\begin_layout Plain Layout

        _delay_ms(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinLOW);
\end_layout

\begin_layout Plain Layout

        _delay_ms(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    _delay_ms(1500);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // LOOP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while (1) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Flash the pin every second.
\end_layout

\begin_layout Plain Layout

        ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

        _delay_ms(1000);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

avrDigitalPin-output Example
\begin_inset CommandInset label
LatexCommand label
name "lis:pioDigitalPin-output-example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-input-example"

\end_inset

 is 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin-input
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * Example sketch using the "avrDigitalPins" library.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Reads a switch on pin D2, toggles the builtin LED.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Norman Dunbar
\end_layout

\begin_layout Plain Layout

 * 26 August 2021.
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Include the library header.
\end_layout

\begin_layout Plain Layout

#include "avrDigitalPin.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Header for _delay_ms() also required.
\end_layout

\begin_layout Plain Layout

#include <util/delay.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Create a digitalPin connected to the built in LED
\end_layout

\begin_layout Plain Layout

// and configure it as output.
\end_layout

\begin_layout Plain Layout

avrDigitalPin ledPin(pinD13, pinOUTPUT);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// And another attached to D2, configured as an input
\end_layout

\begin_layout Plain Layout

// with pullup.
\end_layout

\begin_layout Plain Layout

avrDigitalPin switchPin(pinD2, pinINPUT_PULLUP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // SETUP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // No setup specifically required, but quick
\end_layout

\begin_layout Plain Layout

    // flash the LED a couple of times "manually".
\end_layout

\begin_layout Plain Layout

    for (uint8_t x = 0; x < 5; x++) {
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinHIGH);
\end_layout

\begin_layout Plain Layout

        _delay_ms(250);
\end_layout

\begin_layout Plain Layout

        ledPin.setState(pinLOW);
\end_layout

\begin_layout Plain Layout

        _delay_ms(100);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Delay before starting the loop.
\end_layout

\begin_layout Plain Layout

    _delay_ms(1500);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // LOOP:
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Read the switch and if pressed, toggle
\end_layout

\begin_layout Plain Layout

    // the built in LED.
\end_layout

\begin_layout Plain Layout

    // BEWARE: Without debouncing, this might be
\end_layout

\begin_layout Plain Layout

    //         somewhat random.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (switchPin.getState() == pinLOW) {
\end_layout

\begin_layout Plain Layout

        // Switch pressed, toggle the ledPin.
\end_layout

\begin_layout Plain Layout

        ledPin.toggleState();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // A small delay.
 This stops the switch being
\end_layout

\begin_layout Plain Layout

    // read again and again while held down!
\end_layout

\begin_layout Plain Layout

    // Press and release as quick as possible!
\end_layout

\begin_layout Plain Layout

    _delay_ms(250);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

avrDigitalPin-input Example
\begin_inset CommandInset label
LatexCommand label
name "lis:pioDigitalPin-input-example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Package & Register with PlatformIO
\begin_inset CommandInset label
LatexCommand label
name "sec:Registering-with-PlatformIO"

\end_inset


\end_layout

\begin_layout Standard
After all the preparatory work has been done, we can now package up and
 register our library with the PlatformIO infrastructure.
 Make sure that we are currently located in the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
pioDigitalPin
\end_layout

\end_inset

 directory, and package the library with the command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio package pack -o avrDigitalPin-1.0.0.tar.gz
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If there are any errors in the JSON file, you will be told about it here.
 If there are no errors, you will see a message informing you that the library
 has been packaged:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Wrote a tarball to "avrDigitalPin-1.0.0.tar.gz"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The library is ready to be published.
 However, before that can be done, we need to login to our PlatformIO account:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio account login -u NormanDunbar -p ThisI5N0tMyRealPa55w0rd!! 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you are already logged in you will see this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Error: You are already authorized with norman.dunbar@example.com account.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Otherwise, you should now be logged in to your account:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Successfully logged in!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The library can be published now:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio package publish avrDigitalPin-1.0.0.tar.gz 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Assuming all is well, you should then be presented with this message:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

The package has been accepted.
 We will notify you on email when process it.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point, you can point your browser at the 
\begin_inset CommandInset href
LatexCommand href
target "https://platformio.org/lib"

\end_inset

 page and search for your library by name.
 It will most likely be found, however, it may take some time to propagate
 around the entire PlatformIO infrastructure.
 This makes it possible that if you were now to attempt to use the library
 in an application, it may not be found.
\end_layout

\begin_layout Standard
After you receive an email telling you that things are all good with the
 publishing of the library, you should be able to use it.
\end_layout

\begin_layout Section
Installing into Projects
\begin_inset CommandInset label
LatexCommand label
name "sec:Installing-into-the-project"

\end_inset


\end_layout

\begin_layout Standard
After a 
\begin_inset Quotes eld
\end_inset

suitable
\begin_inset Quotes erd
\end_inset

 delay, the library should be ready for use.
 Let's create a new project that will test it, using the code in Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-output-example"

\end_inset

.
 The process is, as usual, quite simple on the command line, which is where
 I tend to spend my time.
 This example will be for an Arduino Uno board.
\end_layout

\begin_layout Itemize
Create a new directory for the project, and change into it:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir pio-avrPin-demo
\end_layout

\begin_layout Plain Layout

cd pio-avrPin-demo
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Initialise a new project:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio init -b uno
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Edit the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file:
\end_layout

\begin_deeper
\begin_layout Itemize
Delete the line:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

framework = arduino
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Add the line:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lib_deps = normandunbar/avrDigitalPin @ ^1.0.0
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Save and exit.
\end_layout

\end_deeper
\begin_layout Itemize
Create the source file, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
src/avrDigitalPin-output.cpp
\end_layout

\end_inset

 and copy the code from Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:pioDigitalPin-output-example"

\end_inset

 into the file.
\end_layout

\begin_layout Itemize
Compile:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Upload:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run -t upload
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And, as if by magic, the LED will be flashing.
 Again!
\end_layout

\begin_layout Section
Installing Globally
\begin_inset CommandInset label
LatexCommand label
name "sec:Installing-Globally"

\end_inset


\end_layout

\begin_layout Standard
In the new world of PlatformIO version 5.0 onward, global installation of
 libraries is forbidden.
 This feature has caused numerous problems in the past, so it has been deprecate
d.
 It is not advised under normal circumstances, and especially if you normally
 code for different platforms.
 Some libraries with the same names, but for different platforms, get installed
 globally and mess up each others compilations.
\end_layout

\begin_layout Standard
So, if you only code for a single platform, you can install libraries so
 that there's only one copy on your system.
 This is similar to the Arduino IDE and when the library gets updated, all
 your Arduino sketches which use it need updating too.
 And sometimes a new library can break an existing sketch.
\end_layout

\begin_layout Standard
The current PlatformIO method of installing the library into each and every
 project that needs it, means that each project can have a different version
 of the library and upgrading one will not affect the others.
\end_layout

\begin_layout Standard
Having said all that, if you are determined to follow the Arduino method
 of 
\emph on
one library fits all
\emph default
 then so be it.
 Here's how it can be done.
\end_layout

\begin_layout Itemize
Create a top level 
\begin_inset Quotes eld
\end_inset

global libraries
\begin_inset Quotes erd
\end_inset

 directory, and change into it:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cd SourceCode
\end_layout

\begin_layout Plain Layout

mkdir PlatformIO-Libraries
\end_layout

\begin_layout Plain Layout

cd PlatformIO-Libraries
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Create a sub-directory for each and every global library you need to have:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mkdir avrDigitalPin
\end_layout

\begin_layout Plain Layout

mkdir ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Copy the source and header files for each required library into the appropriate
 sub-directory:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cp /somewhere/avrDigitalPin/src/* avrDigitalPin/
\end_layout

\begin_layout Plain Layout

cp /somewhere/avrDigitalPin/include/* avrDigitalPin/
\end_layout

\begin_layout Plain Layout

cp ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You need a single directory for each library, containing just the source
 and header files for that particular library.
 They all must be under a top-level 
\begin_inset Quotes eld
\end_inset

enclosing
\begin_inset Quotes erd
\end_inset

 library, as we need to use that later.
\end_layout

\begin_layout Subsection
Projects Using Global Libraries
\end_layout

\begin_layout Standard
To use one of more global libraries, you would create a project in the normal
 manner.
 As I've covered this previously, I will not labour the point here.
\end_layout

\begin_layout Standard
To use a global library, all you now need to do for each project, is:
\end_layout

\begin_layout Itemize
Edit the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
platformio.ini
\end_layout

\end_inset

 file and add these two lines, or similar:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

lib_extra_dirs = 
\end_layout

\begin_layout Plain Layout

    /home/norman/SourceCode/PlatformIO-Libraries
\end_layout

\end_inset

The path can be relative to where the project is, or, as in this case, a
 full path specification.
 I prefer the latter, but other opinions are perfectly valid.
 It can be useful to keep paths relative if the global libraries and the
 projects are beneath an all encompassing directory, and 
\emph on
might
\emph default
 be moved around together.
\end_layout

\begin_layout Itemize
Compile:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Upload:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pio run -t upload
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The one single copy of the global library is used for all projects set up
 in this manner.
 What happens at compile time is that the source files are compiled into
 object files in the current project's 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
.pio/build/uno/libxxx/avrDigitalPin
\end_layout

\end_inset

 directory, and then linked together to build a static library, 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
avrDigitalPin.a
\end_layout

\end_inset

 in the directory 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
.pio/build/uno/libxxx/
\end_layout

\end_inset

.
 
\begin_inset Quotes eld
\end_inset

xxx
\begin_inset Quotes erd
\end_inset

 in this case is a fairly random combination of characters.
\end_layout

\begin_layout Standard
Only the compiled object files and the completed library are installed into
 the project, the source files remain in the 
\begin_inset Flex RegisterName
status open

\begin_layout Plain Layout
lib_extra_dirs
\end_layout

\end_inset

 directory structure.
\end_layout

\begin_layout Standard
Provided you never run a clean build, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

pio run -t clean
\end_layout

\end_inset

, or delete the 
\begin_inset Flex FileName
status open

\begin_layout Plain Layout
.pio
\end_layout

\end_inset

 directory structure, the application code will be using the current version
 of the library as per the sources just compiled.
 If the library source files change, the next build of a project using the
 library will get the updated version of the library.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
backmatter
\end_layout

\end_inset


\end_layout

\end_body
\end_document
